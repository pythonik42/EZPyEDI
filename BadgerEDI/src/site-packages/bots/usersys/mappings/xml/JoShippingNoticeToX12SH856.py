# mapping-script
from badgerEDI import eLog

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

from badgerEDI.treeops import *
from badgerEDI.rules import *

from bots.transform import *

from datetime import *
from decimal import *
from traceback import *
from urllib import *
import time

from X12SH856Lib import *
 
#===============================================================================
# Main mapping function for EDI X12 SH856
#===============================================================================

def main(inn, out):

    DateToday = date.today().strftime("20%y%m%d")
    TimeNow = time.strftime('%H%M', time.localtime())
    eLog.info('JoShippingNoticeToX12SH856 mapping script processing: Date %s, Time %s', 
        DateToday, TimeNow)
    
    partnerID = inn.ta_info['topartner']
    vendorID = inn.ta_info['frompartner']
    DocReferenceID = out.ta_info['reference']
    messageType = out.ta_info['messagetype']
    ediType = out.ta_info['editype']
    eLog.info('Generating %s EDI SH%s doc %s for partner %s from vendor %s', 
        ediType, messageType, DocReferenceID, partnerID, vendorID)    
    
    eMgr = SNEdiMgr('SO', '???')
    eMgr.startProcessingDoc()
    eMgr.startLogCapture(eLog)
    
    # tree of get() transform ops specifying how to convert an 'inn' XML DB content tree to 
    # a normalized ShippingNotice data model (tree)
    inDocTransformTree = DocGetOpsTree(
        inn, 
        'EdiTx',
        CrossDock = GetOneChildLoop(
            'EdiTx.CrossDock',
            # _Y_IF                   = 'EdiTx.CrossDock',
            Name                    = 'Name',
            AddressLine1            = 'AddressLine1',
            AddressLine2            = 'AddressLine2',
            City                    = 'City',
            StateOrProvinceCode     = 'StateOrProvinceCode',
            PostalCode              = 'PostalCode',
            CountryCode             = 'CountryCode',
            LocID                   = 'LocID',
            ),
        Shipment = GetAllChildLoops(
            'EdiTx.Shipment',
            MasterBOL               = 'MasterBOLNumber',    
            ShipDate                = 'ShipDate',
            ShipTime                = 'ShipTime',
            X12MethodOfPayment      = 'X12MethodOfPayment',
            Weight                  = 'Weight',
            NumberOfPallets         = 'NumberOfPallets',
            NumberOfCartons         = 'NumberOfCartons',
            FreightCharge           = 'FreightCharge',
            TotalValue              = 'TotalValue',
            Cubes                   = 'Cubes',              # <-- EEV 'Cubes'
            EstimatedDeliveryDate   = 'EstDeliveryDate',    # <-- EEV 'EstDeliveryDate'
            ScheduledDeliveryDate   = 'SchedDeliveryDate',  # <-- EEV 'SchedDeliveryDate'
            TPBillingAcct           = 'TPBillingAcct',      # <-- EEV 'TPBillingAcct'
            Carrier = GetOneChildLoop(
                'Shipment.Carrier',
                EquipmentNumber         = 'EquipmentNumber',
                Code                    = 'Code',
                Name                    = 'Name',
                PickupReferenceNumber   = 'PickupReferenceNumber',
                PRONumber               = 'PRONumber',
                BOLNumber               = 'BOLNumber',              # <-- EEV 'CarrierBOL'
                RoutingNumber           = 'ShipmentRoutingNum',     # <-- EEV 'ShipmentRoutingNum'                
                ),
            ShipTo = GetOneChildLoop(
                'Shipment.ShipTo',
                Name                    = 'Name',
                AddressLine1            = 'AddressLine1',
                AddressLine2            = 'AddressLine2',
                City                    = 'City',
                StateOrProvinceCode     = 'StateOrProvinceCode',
                PostalCode              = 'PostalCode',
                CountryCode             = 'CountryCode',
                LocID                   = 'LocID',
                LocationName            = 'LocationName',
                FOBLocation             = 'FOBLocation',
                ),
            Order = GetOneChildLoop(
                'Shipment.Order',
                Type                    = 'Type',
                Number                  = 'Number',
                Date                    = 'Date',
                PackingSlipNumber       = 'PackingSlipNumber',
                ReleaseCode             = 'ReleaseCode',     
                InvoiceNumber           = 'InvoiceNumber',
                InvoiceDate             = 'InvoiceDate',
                PromiseDate             = 'PromiseDate',
                RequestedDate           = 'RequestedDate',
                CancelDate              = 'CancelDate',
                ExtraEdiInfo            = 'ExtraEdiInfo',
                ExtraPackingDetails     = 'ExtraPackingDetails',
                PONumber                = 'PONumber',
                PODate                  = 'PODate',
                LineItems = GetAllChildLoops(
                    'Order.LineItem',
                    _Y_ID                    = 'LineNumber',
                    LineNumber              = 'LineNumber',
                    SalesOrderLine          = 'SalesOrderLine',
                    QuantityShipped         = 'QuantityShipped',
                    QuantityOrdered         = 'QuantityOrdered',
                    UnitOfMeasure           = 'UnitOfMeasure',
                    UnitPrice               = 'UnitPrice',
                    UPCCode                 = 'UPCCode',
                    VendorStyleCode         = 'VendorStyleCode',
                    Description             = 'Description',
                    Color                   = 'Color',
                    Size                    = 'Size',
                    RequestedColor          = 'RequestedColor',
                    FreightCharges          = 'FreightCharges', 
                    ), # LineItem
                ), # Order
            ) # Shipment
        ) # EdiTX
    
        
    # now get() the values from the 'inn' XML tree doc to populate the Shipment tree
    EdiTx = inDocTransformTree.evaluate(globals(), locals())
    
    #===================================================================================================================
    # load Customer and Vendor default values    
    #===================================================================================================================
    Customer = DynO(**partnerValue(partnerID, 'CustomerInfo'))     # Customer default values
    Vendor = DynO(**vendorValue(vendorID, 'VendorInfo'))           # Vendor default values 
        
    # X12 default values loaded from Vendor CC file, then updated with Partner CC file value
    x12base = vendorValue(vendorID, 'ToGen_X12SH856') or dict()
    x12partner = partnerValue(partnerID, 'ToGen_X12SH856') or dict()
    x12base.update(x12partner)  # merge????
    X12 = DynO(**x12base)
    eMgr.setTPSettings(X12) # needed for validation
    
    # load OutDoc generation and validation rules
    outDocValidationConfig = partnerValidationConfig(partnerID, ediType, messageType)
    eMgr.setOutDocValidationConfig(outDocValidationConfig)     
    
    # convenience variables
    CUS = Customer
    VEN = Vendor
    SHIPS = EdiTx.Shipment or list()
    
    # reference optional XDOCK from SHIPM
    # if found, then process as a Consolidated CrossDock shipment for multiple orders
    XDOCK = EdiTx.get('CrossDock', None)
    SHIPM = EdiTx.ShipMaster = DynO()   # consolidated Shipment Master BO
    SHIPM.CrossDock = XDOCK
    
    # adds extraEDIValues at appropriate spots and creates consolidated Shipment Master
    eMgr.addAdditionalShipmentAttributes(EdiTx, SHIPS, SHIPM, DateToday, TimeNow, partnerID, vendorID)
    
    # other variables used is evaluation
    IDGen = ASNIdGenerator()
            
    # recursively evaluate ops in tree (depth first) to generate value tree of outDoc content (and bots outmessage)
    eLog.info('Applying parther \'%s\' specified EDI %s SH%s doc transformation rules.', 
        partnerID, ediType, messageType)
    OutDoc = eMgr.generateOutDocContent(out, locals(), globals())
            
    # DO THIS after transformTree evaluation: must add counts once all other values have been set()
    ctt = out.putloop({'BOTSID':'ST'}, {'BOTSID':'CTT'})
    ctt.put({'BOTSID':'CTT', 'CTT01':SHIPM.NumberOfLineItems}) 
    segCount = out.getcount() + 1
    out.put({'BOTSID':'ST'}, {'BOTSID':'SE', 'SE01':segCount})  # num of segments produced
    out.put({'BOTSID':'ST'}, {'BOTSID':'SE', 'SE02':DocReferenceID})  
    
    # validate the outgoing doc, errors will be logged to eLog
    OutDoc.EdiDocID = 'SH%s(SO%s)' % (EdiTx.InvoiceNumsTxt, EdiTx.OrderNumsTxt)
    OutDoc.EdiDocType = 'X12SH856'
    OutDoc.EdiDocDate = SHIPM.ShipDate
    OutDoc.EdiPartnerID = partnerID
    OutDoc.EdiFromPartnerID = partnerID
    OutDoc.EdiToPartnerID = vendorID
    OutDoc.EdiType = ediType
    OutDoc.EdiMessageType = messageType
    OutDoc.EdiDateProcessed = DateToday
    OutDoc.EdiTimeProcessed = TimeNow
    
    # perform out doc content validation using badgerEDI.rules module
    eMgr.validateOutDocContent(OutDoc)
    eMgr.stopLogCapture(eLog)
    
    # raises error if processing/validation errors were encountered
    eMgr.finishProcessingDoc(OutDoc) 
            
    # saves pickled inn content data tree and sends out notification emails
    eMgr.finishProcessingEdi(OutDoc, inn.ta_info) 


