#!/usr/bin/env python
import sys
if sys.version_info < (2, 7):
    raise SystemError("must use python 2.7 or greater")

from lxml import etree

bizTalkNS = 'http://schemas.microsoft.com/BizTalk/2003'
xsNS = 'http://www.w3.org/2001/XMLSchema'
namespaces = {'b':bizTalkNS, 'xs':xsNS}

def process_xpath(xml, xpath):
    """Returns the result of this xpath query on the given xml string
    
    >>> process_xpath('<foo></foo>', '//bar')
    []
    >>> process_xpath('<html><head><title>my happy test</title></head></html>', '//title')
    ['<title>my happy test</title>']
    >>> process_xpath('<foo><bar><a><b></b></a></bar><bar></bar></foo>', '//bar[a]')
    ['<bar><a><b/></a></bar>']
    """
    tree = etree.XML(xml)
    return [etree.tostring(c) for c in tree.xpath(xpath, namespaces=namespaces)]

def process_xpath_tree(xml, xpath):
    """Returns the result of this xpath query on the given xml string
    
    >>> process_xpath('<foo></foo>', '//bar')
    []
    >>> process_xpath('<html><head><title>my happy test</title></head></html>', '//title')
    ['<title>my happy test</title>']
    >>> process_xpath('<foo><bar><a><b></b></a></bar><bar></bar></foo>', '//bar[a]')
    ['<bar><a><b/></a></bar>']
    """
    tree = etree.XML(xml)
    return [c for c in tree.xpath(xpath, namespaces=namespaces)]

def getSafe(attrDict):
    return

ELEM_TYPE_FIELD = 1
ELEM_TYPE_RECORD = 2
ELEM_TYPE_COMPOSITE = 3

fields = {
    'ST01':          '',
    'ST02':          '',
    'BIG':          '',
    'BIG.BIG01':          '',
    'BIG.BIG02':          '',
    'BIG.BIG03':          '',
    'BIG.BIG04':          '',
    'CUR':          '',
    'CUR.CUR01':          '',
    'CUR.CUR02':          '',
    'REF*':          '',
    'REF*.REF01':          '',
    'REF*.REF02':          '',
    'REF?_IVN':          '',
    'REF?_IVN.REF01':          '',
    'REF?_IVN.REF02':          '',
    'REF?_VON':          '',
    'REF?_VON.REF01':          '',
    'REF?_VON.REF02':          '',
    'N1*':          '',
    'N1*.N101 ':          '',
    'N1*.N102':          '',
    'N1*.N103':          '',
    'N1*.N104':          '',
    'N1*.N3':          '',
    'N1*.N3.N301':          '',
    'N1*.N3.N302':          '',
    'N1*.N4':          '',
    'N1*.N4.N401':          '',
    'N1*.N4.N402':          '',
    'N1*.N4.N403':          '',
    'N1*.N4.N404':          '',
    'N1?_RI':          '',
    'N1?_RI.N101 ':          '',
    'N1?_RI.N102':          '',
    'N1?_RI.N103':          '',
    'N1?_RI.N104':          '',
    'N1?_RI.N3':          '',
    'N1?_RI.N3.N301':          '',
    'N1?_RI.N3.N302':          '',
    'N1?_RI.N4':          '',
    'N1?_RI.N4.N401':          '',
    'N1?_RI.N4.N402':          '',
    'N1?_RI.N4.N403':          '',
    'N1?_RI.N4.N404':          '',
    'N1?_ST':          '',
    'N1?_ST.N101 ':          '',
    'N1?_ST.N102':          '',
    'N1?_ST.N103':          '',
    'N1?_ST.N104':          '',
    'N1?_ST.N3':          '',
    'N1?_ST.N3.N301':          '',
    'N1?_ST.N3.N302':          '',
    'N1?_ST.N4':          '',
    'N1?_ST.N4.N401':          '',
    'N1?_ST.N4.N402':          '',
    'N1?_ST.N4.N403':          '',
    'N1?_ST.N4.N404':          '',
    'N1?_BT':          '',
    'N1?_BT.N101 ':          '',
    'N1?_BT.N102':          '',
    'N1?_BT.N103':          '',
    'N1?_BT.N104':          '',
    'N1?_BT.N3':          '',
    'N1?_BT.N3.N301':          '',
    'N1?_BT.N3.N302':          '',
    'N1?_BT.N4':          '',
    'N1?_BT.N4.N401':          '',
    'N1?_BT.N4.N402':          '',
    'N1?_BT.N4.N403':          '',
    'N1?_BT.N4.N404':          '',
    'ITD':          '',
    'ITD.ITD01':          '',
    'ITD.ITD02':          '',
    'ITD.ITD06':          '',
    'ITD.ITD07':          '',
    'ITD.ITD12':          '',
    'ITD.DTM*':          '',
    'ITD.DTM*.DTM01 ':          '',
    'ITD.DTM*.DTM02':          '',
    'ITD.DTM?_DSHP':          '',
    'ITD.DTM?_DSHP.DTM01 ':          '',
    'ITD.DTM?_DSHP.DTM02':          '',
    'ITD.DTM?_EDLV':          '',
    'ITD.DTM?_EDLV.DTM01 ':          '',
    'ITD.DTM?_EDLV.DTM02':          '',
    'FOB':          '',
    'FOB.FOB01':          '',
    'FOB.FOB02':          '',
    'FOB.FOB03':          '',
    'IT1*':          '',
    'IT1*.IT101':          '',
    'IT1*.IT102':          '',
    'IT1*.IT103':          '',
    'IT1*.IT104':          '',
    'IT1*.IT106':          '',
    'IT1*.IT107':          '',
    'IT1*.IT108':          '',
    'IT1*.IT109':          '',
    'IT1*.PID*':          '',
    'IT1*.PID*.PID01':          '',
    'IT1*.PID*.PID02':          '',
    'IT1*.PID*.PID05':          '',
    'IT1*.PID?_PRD':          '',
    'IT1*.PID?_PRD.PID01':          '',
    'IT1*.PID?_PRD.PID02':          '',
    'IT1*.PID?_PRD.PID05':          '',
    'IT1*.PID?_CLR':          '',
    'IT1*.PID?_CLR.PID01':          '',
    'IT1*.PID?_CLR.PID02':          '',
    'IT1*.PID?_CLR.PID05':          '',
    'IT1*.PID?_SZ':          '',
    'IT1*.PID?_SZ.PID01':          '',
    'IT1*.PID?_SZ.PID02':          '',
    'IT1*.PID?_SZ.PID05':          '',
    'IT1*.PID?_BYCLR':          '',
    'IT1*.PID?_BYCLR.PID01':          '',
    'IT1*.PID?_BYCLR.PID02':          '',
    'IT1*.PID?_BYCLR.PID05':          '',
    'TDS':          '',
    'TDS.TDS01':          '',
    'CAD*':          '',
    'CAD*.CAD04':          '',
    'CAD*.CAD07 ':          '',
    'CAD*.CAD08':          '',
    'CAD?_BOLN':          '',
    'CAD?_BOLN.CAD04':          '',
    'CAD?_BOLN.CAD07 ':          '',
    'CAD?_BOLN.CAD08':          '',
    'CAD?_CARN':          '',
    'CAD?_CARN.CAD04':          '',
    'CAD?_CARN.CAD07 ':          '',
    'CAD?_CARN.CAD08':          '',
    'CAD?_PREFN':          '',
    'CAD?_PREFN.CAD04':          '',
    'CAD?_PREFN.CAD07 ':          '',
    'CAD?_PREFN.CAD08':          '',
    'SAC':          '',
    'SAC.SAC01':          '',
    'SAC.SAC02':          '',
    'SAC.SAC05':          '',
    'SAC.SAC12':          '',
    'SAC.SAC15':          '',
    'ISS':          '',
    'ISS.ISS01':          '',
    'ISS.ISS02':          '',
    }

if __name__ == "__main__":  
    import argparse
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    
    group_xml = parser.add_mutually_exclusive_group(required=True)
    group_xml.add_argument('-x', action='store', dest='xml',
                    help='XML Content to be queried')
    group_xml.add_argument('--xmlfile', dest='xmlfile', 
                    type=argparse.FileType('rt'),
                    help='XML File to read the content from')
    
    group_xp = parser.add_mutually_exclusive_group(required=True)
    group_xp.add_argument('-q', action='store', dest='xpath',
                    help='XPath query')
    
    args = parser.parse_args()
    xml = args.xml or args.xmlfile.read()
    xpath = args.xpath
    
    # prep fields dict
    fmap = dict()
    ftrans = dict()
    for field in fields.keys():
        fname = field.split('.')[-1]
        newFname = fname.replace('*', '')
        fmap[field] = newFname
        ftrans[newFname] = None
        # print "'%s':        '%s'" % (field, newFname) 
    
    ret = process_xpath_tree(xml, '//xs:element')
    for recInfo in ret:
        for elem in recInfo.xpath('//xs:complexType/*/xs:element', namespaces=namespaces):
            # print etree.tostring(rule)
            attrs = elem.attrib
            eName = attrs.get('name')
            eType = attrs.get('type') or ''
            eMinOccurs = attrs.get('minOccurs') or '0'
            eMaxOccurs = attrs.get('maxOccurs')
            eRef = attrs.get('ref')
            
            # print 'ename=%s, eType=%s, eMinOccurs=%s, eMaxOccurs=%s, eRef=%s' % (eName, eType, eMinOccurs, eMaxOccurs, eRef)
            
            children = list(elem)
            for child in children:
                if child.tag == r'{http://www.w3.org/2001/XMLSchema}annotation':
                    children2 = list(child)
                    for child2 in children2:
                        if child2.tag == r'{http://www.w3.org/2001/XMLSchema}appinfo':
                            children3 = list(child2)
                            for child3 in children3:
                                if child3.tag == r'{http://schemas.microsoft.com/BizTalk/2003}fieldInfo':
                                    elemType = ELEM_TYPE_FIELD
                                    eNotes = child3.get('notes')
                                elif child3.tag == r'{http://schemas.microsoft.com/BizTalk/2003}recordInfo':
                                    elemType = ELEM_TYPE_RECORD
                                    eFieldOrder = child3.get('field_order')
                                    eTagName = child3.get('tag_name')
                                    eCountIgnore = child3.get('count_ignore')
                                    eNotes = child3.get('notes')
                                elif child3.tag == r'{http://schemas.microsoft.com/BizTalk/2003}CompositeID':
                                    elemType = ELEM_TYPE_COMPOSITE
                                else:
                                    # print 'Unknown appinfo child: %s' % (child3.tag,)
                                    pass

                elif child.tag == r'{http://www.w3.org/2001/XMLSchema}simpleType':
                    isSimpleType = True
                    children2 = list(child)
                    for child2 in children2:
                        # print 'SimpleType child %s' % (child2.tag,)
                        if child2.tag == r'{http://www.w3.org/2001/XMLSchema}restriction':
                            eBaseType = child2.get('base')
                            # print 'BaseType %s' % (eBaseType,)
                            children3 = list(child2)
                            for child3 in children3:
                                if child3.tag == r'{http://www.w3.org/2001/XMLSchema}minLength':
                                    eMinLength = child3.get('value')
                                    # print 'MinLength %s' % (eMinLength,)
                                elif child3.tag == r'{http://www.w3.org/2001/XMLSchema}maxLength':
                                    eMaxLength = child3.get('value')
                                    # print 'MaxLength %s' % (eMaxLength,)
                                else:
                                    # print 'Unknown restriction child: %s' % (child3.tag,)
                                    pass
                            
                elif child.tag == r'{http://www.w3.org/2001/XMLSchema}complexType':
                    isSimpleType = False
                    pass
                
                else:
                    # print 'Unknown element child %s' % (child.tag,)
                    pass
                    
            if eMaxOccurs:
                if eMaxOccurs == 'unbounded':
                    eMaxOccurs = '9999999'
                eRange = '[%s-%s]' % (eMinOccurs, eMaxOccurs)
            else:
                if eMinOccurs and not eMinOccurs == '0':
                    eRange = '[%s]' % (eMinOccurs,)
                else:
                    eRange = '*'
                    
            if isSimpleType:
                if eType:
                    eTypeString = eType
                else:
                    eTypeString = '%s[%s..%s]' % (eBaseType, eMinLength, eMaxLength)
            else:
                eTypeString = '<COMPLEX>'
            
#            if elemType == ELEM_TYPE_FIELD:
#                print 'FLD %s%s (%s) %s' % (eName, eRange, eTypeString, eNotes)
#            if elemType == ELEM_TYPE_RECORD:
#                print 'REC %s%s (%s) %s' % (eRef, eRange, eTypeString, eNotes)
#            if elemType == ELEM_TYPE_COMPOSITE:
#                print 'COMP %s: %s' % (eName, eNotes)
                
            if eName in ftrans.keys():
                ftrans[eName] = '%s - %s' % (eName, eNotes)
                # print ftrans[eName]
                
    for fpath in fields.keys():
        if fpath in fmap and fmap[fpath] in ftrans:
            fields[fpath] = ftrans[fmap[fpath]]

    flist = fields.keys()
    flist.sort()    
    for fpath in flist:
        print "'%s':  '%s'," % (fpath, fields[fpath] or '')
                
import doctest, unittest
class ModuleUnitTesting(unittest.TestCase):
        
    def test_py_xpath(self):
        suite = doctest.DocTestSuite('py_xpath')
        testRunner = unittest.TextTestRunner()
        testRunner.run(suite)