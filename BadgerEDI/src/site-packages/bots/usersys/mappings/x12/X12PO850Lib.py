'''
Classes and functions to support processing of X12 PO 850 docs

@author: jknaus
'''
from badgerEDI import eLog

from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.sql import func

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

import bots.transform as transform
from bots.botsconfig import *
import bots.botsglobal

class POEdiMgr(EdiMgr):
    
    def __init__(self, joDocType=None, joRefNum=None):
        super(POEdiMgr, self).__init__(joDocType, joRefNum)
    
    def nowProcessingLine(self, lineNum):
        self.currLine = lineNum
    
    def nowProcessingDoc(self):
        self.currLine = 0
    
    def finishProcessingDoc(self, salesOrder):
        self.currLine = 0
        self.addEdiOrderTrackingEntryFor(salesOrder)
        
        # update order wordpad notes with EDI messages and ExtraValues form
        self.createSONote10_ExtraEdiInfoTemplate(salesOrder)
        self.createSONote11_CustomerPONotes(salesOrder)
        self.createSONote12_PackingAndShippingDetailsTemplate(salesOrder)
        self.ediNotes = self.createSONote20_EdiResults(salesOrder)    

        errText = 'EDI processing of PO failed during generation of %s %s' % (self.docType, self.refNum)         
        super(POEdiMgr, self).finishProcessingDoc(salesOrder, ifErrorMsg=errText)
        
    def processedEdiOK(self, obj):
        sendX12ProcessingOKEmail(obj.EdiDocType, PO850=obj)

    
    #def startNestedLogCapture(self, childLog):
    #    if not self.childLogRecorder:
    #        # must use parent recorder's eResults object
    #        self.childLogRecorder = self.logRecorder
    #    childLog.addFilter(self.childLogRecorder)
    #
    #def stopNestedLogCapture(self, childLog):
    #    if self.childLogRecorder:
    #        childLog.removeFilter(self.childLogRecorder)
    #        self.childLogRecorder = None
        
    def createSONote10_ExtraEdiInfoTemplate(self, salesOrder):
        
        eLog.debug('Pre-populating SO %s note #10 with ExtraEdiInfo template:', salesOrder.JoOrderNumber)
        
        # EDI data form 'template' of values to be specified prior to outgoing EDI generation
        #
        # IDEA: We might want to make this template customer specific to accommodate
        #       special processing needs of a given EDI recipient
        #
        # TODO: Pull the keys/default values from the partner specific CC file and gen this template
        #       on the fly.
        #
        txtLines = [ 
            EDI_NOTE_HEADER_FORMAT_STRING % ('Extra EDI Values',),
            '# Enter dates as YYYYMMDD',
            'CarrierBOL:',
            'ShipmentRoutingNum:',
            'Cubes:',
            'EstDeliveryDate:',
            'TPBillingAcct:', 
            ]
        ediDataFormText = '\n'.join(txtLines)
        eLog.debug(ediDataFormText)
        
        # Save outgoing Extra EDI Value Form template in WordPad Sales Order Note #10
        wordpadNote = JoWordpadNote()
        wordpadNote.WPBNR = salesOrder.JoBusinessUnit
        wordpadNote.WPPLT = salesOrder.JoBasePlant
        wordpadNote.WPNTYP = '#D'   # sales order note
        wordpadNote.WPCODE = 'SO'+salesOrder.JoOrderNumber
        wordpadNote.WPLINE = '10'
        wordpadNote.WPPFLG = 'N'
        wordpadNote.WPFL10 = 'Y'    # EDI info
        wordpadNote.WPTEXT = ediDataFormText
        Session.add(wordpadNote)
    
    def createSONote11_CustomerPONotes(self, salesOrder):

        poNotes = list()        
        if salesOrder.PONotes:
            poNotes.append('##### Notes and Messages #####\n' + '\n'.join(salesOrder.PONotes))
        if salesOrder.CarrierNotes:
            poNotes.append('##### Carrier Notes #####\n' + '\n'.join(salesOrder.CarrierNotes))
        if salesOrder.ShippingNotes:
            poNotes.append('##### Shipping Notes #####\n' + '\n'.join(salesOrder.ShippingNotes))
            
        if poNotes:
            poNotes = '\n'.join(poNotes)
            eLog.debug('Creating SO %s note #11 with CustomerPONotes:', salesOrder.JoOrderNumber)
        
            poNotes = EDI_NOTE_HEADER_FORMAT_STRING % ('Customer PO Notes\n',) + poNotes
            eLog.debug(poNotes)
        
            # Save consolidated Notes from X12 850 doc to Sales Order Note #10
            wordpadNote = JoWordpadNote()
            wordpadNote.WPBNR = salesOrder.JoBusinessUnit
            wordpadNote.WPPLT = salesOrder.JoBasePlant
            wordpadNote.WPNTYP = '#D'   # sales order note
            wordpadNote.WPCODE = 'SO'+salesOrder.JoOrderNumber
            wordpadNote.WPLINE = '11'
            wordpadNote.WPPFLG = 'N'
            wordpadNote.WPFL10 = 'Y'    # EDI info
            wordpadNote.WPTEXT = poNotes
            Session.add(wordpadNote)
        else:
            eLog.debug('No Customer PO Notes added for SO %s.', salesOrder.JoOrderNumber)

    def createSONote12_PackingAndShippingDetailsTemplate(self, salesOrder):
        
        eLog.debug('Pre-populating SO %s note #12 with PackingAndShippingDetails template:', salesOrder.JoOrderNumber)
        
        caseLabelNum = salesOrder.JoOrderNumber.zfill(10)+'0000101'
        checkDigit = transform.calceancheckdigit(caseLabelNum)
        caseLabelNum += checkDigit
        
        txtLines = [ 
            EDI_NOTE_HEADER_FORMAT_STRING % ('Packing Details',),
            '# Case: %s' % (caseLabelNum,),
            ]
        ediDataFormText = '\n'.join(txtLines)
        eLog.debug(ediDataFormText)

        # Save optional outgoing EDI Multipack Details template in WordPad Sales Order Note #12
        wordpadNote = JoWordpadNote()
        wordpadNote.WPBNR = salesOrder.JoBusinessUnit
        wordpadNote.WPPLT = salesOrder.JoBasePlant
        wordpadNote.WPNTYP = '#D'   # sales order note
        wordpadNote.WPCODE = 'SO'+salesOrder.JoOrderNumber
        wordpadNote.WPLINE = '12'
        wordpadNote.WPPFLG = 'N'
        wordpadNote.WPFL10 = 'Y'    # EDI info
        wordpadNote.WPTEXT = ediDataFormText
        Session.add(wordpadNote)
        
    def createSONote20_EdiResults(self, salesOrder):

        notes = self.createSONote_EdiResults(salesOrder, 20)   # original PO load notes in #20        
        return notes

