# vendor X12 810 4030 VICS validation rules for Dunham's Sports Inc. 130630494

from base_810004030VICS import fieldDescriptions, namedSegmentFormats


def getOutDocMap(out):
    return OutDocTreeMap(
        out, 'ST',
        ST01='810',
        ST02='@DocReferenceID',
        BIG=Seg(
            BIG01='@INV.Date',
            BIG02='@INV.Number',
            BIG03='@PO.Date',
            BIG04='@PO.Number',
            ),
        CUR=Seg(
            CUR01='SE',
            CUR02='@SO.CurrencyCode',
            ),
        REF=SegList(
            _Y_USES='IVN,VON',
            _IVN=Seg(
                _Y_IF='@VEN.DUNSNumber', 
                REF01='IA', 
                REF02='@VEN.DUNSNumber.zfill(11)'),
            _VON=Seg(
                _Y_IF='@SO.Number', 
                REF01='VN', 
                REF02='@SO.Number'),
            ),
        N1=SegList(
            _Y_USES='RI,ST,BT',
            _RI=Seg(
                _Y_IF='@VEN',
                N101='RI', 
                N102='@VEN.Name',
                N3=Seg(
                    N301='@VEN.AddressLine1',
                    N302='@VEN.AddressLine2',
                    ),
                N4=Seg(
                    N401='@VEN.City',
                    N402='@VEN.StateOrProvinceCode',
                    N403='@VEN.PostalCode',
                    N404='@VEN.CountryCode',
                    ),
                ),
            _ST=Seg(
                _Y_IF='@STO',
                N101='ST', 
                N102='@STO.Name',
                N103='92', 
                N104='@PO.ShipToLocation',
                N3=Seg(
                    N301='@STO.AddressLine1',
                    N302='@STO.AddressLine2',
                    ),
                N4=Seg(
                    N401='@STO.City',
                    N402='@STO.StateOrProvinceCode',
                    N403='@STO.PostalCode',
                    N404='@STO.CountryCode',
                    ),
                ),
            _BT=Seg(
                _Y_IF='@BTO',
                N101='BT', 
                N102='@BTO.Name',
                N3=Seg(
                    N301='@BTO.AddressLine1',
                    N302='@BTO.AddressLine2',
                    ),
                N4=Seg(
                    N401='@BTO.City',
                    N402='@BTO.StateOrProvinceCode',
                    N403='@BTO.PostalCode',
                    N404='@BTO.CountryCode',
                    ),
                ),
            ),
        ITD=Seg(
            ITD01='@X12.DiscountNotApplicable',
            ITD02='@X12.TOSDateQualifier',
            ITD06='@INV.TOSNetDueDate',
            ITD07='@INV.TOSNetDaysDue',
            ITD12='@INV.TOSNetDescription',
            ),
            DTM=SegList(
                _Y_USES='DSHP,EDLV',
                _DSHP=Seg(
                    _Y_IF='@SHIP.ShipDate',
                    DTM01='011', 
                    DTM02='@SHIP.ShipDate'),
                _EDLV=Seg(
                    _Y_IF='@SHIP.EstimatedDeliveryDate',
                    DTM01='017', 
                    DTM02='@SHIP.EstimatedDeliveryDate'),
                ),
        FOB=Seg(
            FOB01='@SHIP.MethodOfPayment',
            FOB02='@If(SHIP.FOBLocation, \'OR\', \'DE\')',
            FOB03='@SHIP.FOBLocation',
            ),
        IT1=ForLoop(
            'IT', 'INV.LineItems',
            IT101='@IT.LineNumber',
            IT102='@Decimal(IT.Quantity).to_integral_value()',
            IT103='@IT.UnitOfMeasure',
            IT104='@fmtStringAsMoney(IT.UnitPrice)',
            IT106='UP',
            IT107='@IT.UPCCode',
            IT108='VA',
            IT109='@IT.VendorStyleCode',
            PID=SegList(
                _Y_USES='PRD,CLR,SZ,BYCLR',
                _PRD   =Seg(_Y_IF='@IT.Description',    PID01='F', PID02='08', 
                                                        PID05='@IT.Description'),
                _CLR   =Seg(_Y_IF='@IT.Color',          PID01='F', PID02='73', 
                                                        PID05='@IT.Color'),
                _SZ    =Seg(_Y_IF='@IT.Size',           PID01='F', PID02='74', 
                                                        PID05='@IT.Size'),
                _BYCLR =Seg(_Y_IF='@IT.RequestedColor', PID01='F', PID02='75', 
                                                        PID05='@IT.RequestedColor'),
                ),
            ),
        TDS=Seg(
            TDS01='@fmtStringAsMoney(INV.TotalValue)',
            ),
        CAD=SegList(
            _Y_USES='BOLN,CARN,PREFN',
            # for LTL or long-haul Trucks: Carrier BOL Number and Carrier Pro Number
            # sometimes both are used
            _BOLN=Seg(
                _Y_IF='@X12.IsLTLOrTruckCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='BM', 
                CAD08='@CAR.BOLNumber'),
            _CARN=Seg(
                _Y_IF='@X12.IsLTLOrTruckCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='CN', 
                CAD08='@CAR.PRONumber'),
            # for parcel carriers: Pickup Ref Number or Tracking Number
            # use only one of these at a time
            _PREFN=Seg(
                _Y_IF='@X12.IsParcelCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='P8', 
                CAD08='@CAR.PickupReferenceNumber'),
            _TRCKN=Seg(
                _Y_IF='@X12.IsParcelCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='2I', 
                CAD08='@CAR.PickupReferenceNumber'),
            ),
        # shipment level charges/allowances
        SAC=Seg(
            _Y_IF='@CAR.FreightCharge and Decimal(CAR.FreightCharge) > 0.00',
            SAC01='C',
            SAC02='D240',
            SAC05='@fmtStringAsMoney(CAR.FreightCharge)',
            SAC12='02',
            SAC15='FREIGHT CHARGE',
            ),
        ISS=Seg(
            ISS01='@Decimal(INV.TotalNumberOfItems).to_integral_value()',
            ISS02='EA',
            ),
        )
      
from badgerEDI.rules import *

contentRules = [         
    ('ST',                          RReqs('ST01', 'ST02', 'BIG', 'REF', 'N1[2]', 'IT1[1-1000]', 'TDS', 'CAD')),
    #################
    ('ST.ST01',                     RMustBe('810')),
    
    ('ST.BIG',                      RReqs('BIG01', 'BIG02', 'BIG04')),
       
    ('ST.REF',                      RReqs('_IVN')),
    ('ST.REF*',                     RReqs('REF01', 'REF02')),
    ('ST.REF?_IVN.REF01',           RMustBe('IA')),
    
    ('ST.N1',                       RReqs('_ST','_RI')),
    ('ST.N1?_ST',                   RReqs('N101', 'N102', 'N103', 'N104')),
    ('ST.N1?_ST.N101',              RMustBe('ST')),
    ('ST.N1?_ST.N103',              RMustBe('92')),
    ('ST.N1?_RI',                   RReqs('N101', 'N102')),
    ('ST.N1?_RI.N101',              RMustBe('RI')),
    
    ('ST.IT1*',                     RReqs('IT103', 'IT104', 'IT106', 'IT107', 'PID')),
    ##################
    ('ST.IT1*',                     RAtomic('IT107', 'IT108')),
    ('ST.IT1*.IT106',               RMustBe('UP')),                
    ('ST.IT1*.IT108',               RMustBe('VA')),
    
    ('ST.IT1*.PID',                 RReqs('_PRD')),
    ('ST.IT1*.PID?_PRD',            RReqs('PID01', 'PID05')),
    ('ST.IT1*.PID?_PRD.PID01',      RMustBe('F')),
    
    ('ST.TDS',                      RReqs('TDS01')),   

    ('ST.CAD',                      ROneOf('_BOLN', '_PREFN')),
    ('ST.CAD*',                     RReqs('CAD04', 'CAD07', 'CAD08')),
    ('ST.CAD?_BOLN.CAD07',          RMustBe('BM')),
    ('ST.CAD?_PREFN.CAD07',         RMustBe('P8')),
    ]

