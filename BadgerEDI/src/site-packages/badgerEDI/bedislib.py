'''
Badger EDI common classes and functions

@author: jknaus
'''
from logging import *
from badgerEDI import eLog

from decimal import *

from bots.botslib import ScriptError
import bots.botslib as botslib

import bots.transform as transform

import xml.parsers.expat

#===============================================================================
# Constants
#===============================================================================
EDI_NOTE_HEADER_FORMAT_STRING = '### EDI ############## %s'

MSG_TYPE_LINE_PREFIX = {
    DEBUG    : 'DBG',     
    INFO     : '   ',
    WARNING  : 'WRN',
    ERROR    : 'ERR',
    CRITICAL : 'ERR',
    NOTSET   : '   '
}
UNKNOWN_MSG_TYPE_LINE_PREFIX = '???'
WORDPAD_NOTE_MSG_TYPES = [CRITICAL, ERROR, WARNING, INFO, NOTSET]  # no DEBUG

EMAIL_NOTIFICATION_LINE_PREFIX = {
    DEBUG    : '  Debug:  ',     
    INFO     : '',
    WARNING  : 'Warning: ',
    ERROR    : '____Error'+'_'*70+'\n',
    CRITICAL : '____Error'+'_'*70+'\n',
    NOTSET   : ''
}
UNKNOWN_MSG_TYPE_LINE_PREFIX_FOR_EMAIL = ''
ERROR_LOG_MSG_TYPES = [CRITICAL, ERROR, WARNING, INFO]  # INFO and above
ADMIN_ERROR_LOG_MSG_TYPES = [CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET]  # ALL

ERROR_MSG_TYPES = [ERROR, CRITICAL]

NA = 'n/a'

# dict marker interface
class dictLike(object):
    pass

#===============================================================================
# Badger EDI exception classes
#===============================================================================

class BEDISx_DependentFieldNotFound(ScriptError):
    def __init__(self, **kw):
        super(ScriptError, self).__init__(
            'Input field $parent is specified, but a required child field (one of $children) is not.', 
            **kw)
        
class BEDISx_RequiredFieldNotFound(ScriptError):
    def __init__(self, **kw):
        super(ScriptError, self).__init__(
            'Input field $field is a required field value.', 
            **kw)
        
class BEDISx_MappingError(ScriptError):
    def __init__(self, **kw):
        super(ScriptError, self).__init__(
            'An error occurred in EDI mapping:\n$errMsg', 
            **kw)
                

#===============================================================================
# CONVENIENCE FUNCTIONS FOR RETRIEVING CUSTOM CODE CONVERSION VALUES
#===============================================================================

# answers a custom value for 'key' as defined 
# in the partner's custom code conversions file
def partnerValue(tpID, key):
    rval = transform.safecodeconversion('partner'+tpID, key)
    return rval != key and rval 

# answers a custom value for 'key' as defined 
# in the vendor's custom code conversions file
def vendorValue(tpID, key):
    rval = transform.safecodeconversion('vendor'+tpID, key)
    return rval != key and rval 

def partnerValidationConfig(tpID, docType, msgType):
    return validationConfig(docType, 'partner'+tpID+'_'+msgType)

def validationConfig(docType, modulename):
    ''' validation engine metatdata imported from file in validation directory (lookup in right place/module in bots.ini)
    '''
    module,filename = botslib.botsimport('validation.'+docType, modulename)
    return module

#===============================================================================
# Some utility functions     
#===============================================================================

        
__mapEdiDocTypeToDirection = {
    'X12PO850':'Incoming',
    'X12PC860':'Incoming',
    'X12SH856':'Outgoing',
    'X12IN810':'Outgoing',
    }

def getDirectionForEdiDocType(docType):
    return __mapEdiDocTypeToDirection.get(docType, None)

__mapEdiDocTypeToDirectionArrow = {
    'X12PO850':'<--PO--',
    'X12PC860':'<--PC--',
    'X12SH856':'--SH-->',
    'X12IN810':'--IN-->',
    }

def getEdiDirectionArrowForEdiDocType(docType):
    return __mapEdiDocTypeToDirectionArrow.get(docType, None)

def getDirectedEdiDocType(docType):
    direction = getDirectionForEdiDocType(docType)
    if direction:
        return direction + ' ' + docType
    else:
        return docType
    
def getEdiDirectionArrow(docType):
    return getEdiDirectionArrowForEdiDocType(docType)

def VNA(x):
    return x or NA

def intToOrdinal(n):
    if 10 < n < 14: return '%sth' % n
    if n % 10 == 1: return '%sst' % n
    if n % 10 == 2: return '%snd' % n
    if n % 10 == 3: return '%srd' % n

    return '%sth' % n

#
#    Do Sum-thing
#
    
def sumAllInt(eList, attr):
    cnt = 0
    for e in eList:
        cnt += int(e.get(attr, '0') or '0')
    return str(cnt)

def sumAllDecimal(eList, attr):
    cnt = Decimal('0.0')
    for e in eList:
        cnt += Decimal(e.get(attr, '0.0') or '0.0')
    return str(cnt)

def sumAllMoney(eList, attr):
    return fmtStringAsMoney(sumAllDecimal(eList,attr))


def firstAvailable(*arg):
  """
  Return first item in a sequence where item not None.
  """
  for item in arg:
    if item is not None: 
      return item
  return None

def If(ifPart, thenPart, elsePart=None):
    
    if ifPart:
        return thenPart
    else:
        return elsePart
    

def fmtDecimalToMoney(value, places=2, curr='', sep='', dp='.',
             pos='', neg='-', trailneg=''):
    """
    Convert Decimal to a money formatted string.

    places:  required number of places after the decimal point
    curr:    optional currency symbol before the sign (may be blank)
    sep:     optional grouping separator (comma, period, space, or blank)
    dp:      decimal point indicator (comma or period)
             only specify as blank when places is zero
    pos:     optional sign for positive numbers: '+', space or blank
    neg:     optional sign for negative numbers: '-', '(', space or blank
    trailneg:optional trailing minus indicator:  '-', ')', space or blank

    >>> d = Decimal('-1234567.8901')
    >>> moneyfmt(d, curr='$')
    '-$1,234,567.89'
    >>> moneyfmt(d, places=0, sep='.', dp='', neg='', trailneg='-')
    '1.234.568-'
    >>> moneyfmt(d, curr='$', neg='(', trailneg=')')
    '($1,234,567.89)'
    >>> moneyfmt(Decimal(123456789), sep=' ')
    '123 456 789.00'
    >>> moneyfmt(Decimal('-0.02'), neg='<', trailneg='>')
    '<0.02>'
    """
    if value is None:
        return None
    else:
        q = Decimal(10) ** -places      # 2 places --> '0.01'
        sign, digits, exp = value.quantize(q).as_tuple()
        result = []
        digits = map(str, digits)
        build, next = result.append, digits.pop
        if sign:
            build(trailneg)
        for i in range(places):
            build(next() if digits else '0')
        build(dp)
        if not digits:
            build('0')
        i = 0
        while digits:
            build(next())
            i += 1
            if i == 3 and digits:
                i = 0
                build(sep)
        build(curr)
        build(neg if sign else pos)
        return ''.join(reversed(result))

def fmtStringAsMoney(ediValue):
    if ediValue is None:
        return None
    else:
        return fmtDecimalToMoney(Decimal(ediValue))

def unescapeXML(s):
    want_unicode = False
    if isinstance(s, unicode):
        s = s.encode("utf-8")
        want_unicode = True

    # the rest of this assumes that `s` is UTF-8
    list = []

    # create and initialize a parser object
    p = xml.parsers.expat.ParserCreate("utf-8")
    p.buffer_text = True
    p.returns_unicode = want_unicode
    p.CharacterDataHandler = list.append

    # parse the data wrapped in a dummy element
    # (needed so the "document" is well-formed)
    p.Parse("<e>", 0)
    p.Parse(s, 0)
    p.Parse("</e>", 1)

    # join the extracted strings and return
    es = ""
    if want_unicode:
        es = u""
    return es.join(list)




