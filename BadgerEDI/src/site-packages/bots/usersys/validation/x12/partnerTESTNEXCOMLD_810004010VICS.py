# vendor X12 810 4010 VICS validation rules for NEXCOMLD (the US Naval Exchange)

from base_810004010VICS import fieldDescriptions, namedSegmentFormats

def getOutDocMap(out):
    return OutDocTreeMap(
        out, 'ST',
        ST01='810',
        ST02='@DocReferenceID',
        BIG=Seg(
            BIG01='@INV.Date',
            BIG02='@INV.Number',
            BIG04='@PO.Number',
            ),
        REF=SegList(
            _Y_USES='IVN',
            _IVN=Seg(
                _Y_IF='@VEN.DUNSNumber', 
                REF01='IA', 
                REF02='@VEN.DUNSNumber.zfill(11)'),
            ),
        N1=SegList(
            _Y_USES='RI,ST',
            _RI=Seg(
                _Y_IF='@VEN',
                N101='RI', 
                N102='@VEN.Name',
                ),
            _ST=Seg(
                _Y_IF='@PO.ShipToLocation',
                N101='ST', 
                N102='@PO.ShipToName',
                N103='92', 
                N104='@PO.ShipToLocation',
                ),
            ),
        IT1=ForLoop(
            'IT', 'INV.LineItems',
            IT102='@Decimal(IT.Quantity).to_integral_value()',
            IT103='@IT.UnitOfMeasure',
            IT104='@fmtStringAsMoney(IT.UnitPrice)',
            IT106='UP',
            IT107='@IT.UPCCode',
            IT108='VA',
            IT109='@IT.VendorStyleCode',
            PID=SegList(
                _Y_USES='PRD',
                _PRD=Seg(
                    _Y_IF='@IT.Description or IT.VendorStyleCode=="ZZ FRT"',    
                    PID01='F', 
                    PID05='@IT.Description or "Freight Charge"'),
                ),
            ),
        TDS=Seg(
            _Y_IF='@INV.TotalValue',
            TDS01='@fmtStringAsMoney(INV.TotalValue)',
            ),
        CAD=SegList(
            _Y_USES='BOLN,TRCKN',
            # for LTL or long-haul Trucks: Carrier BOL Number
            _BOLN=Seg(
                _Y_IF='@X12.IsLTLOrTruckCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='BM', 
                CAD08='@CAR.BOLNumber'),
            # for LTL or long-haul Trucks: Carrier PRO Number  #### NOT USED ####
            _CARN=Seg(
                _Y_IF='@X12.IsLTLOrTruckCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='CN', 
                CAD08='@CAR.PRONumber'),
            # for parcel carriers: Pickup Ref Number   #### NOT USED #####
            _PREFN=Seg(
                _Y_IF='@X12.IsParcelCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='P8', 
                CAD08='@CAR.PickupReferenceNumber'),
            # for parcel carriers: Carrier Tracking Number                
            _TRCKN=Seg(
                _Y_IF='@X12.IsParcelCarrier.get(CAR.Code, None)',
                CAD04='@X12.CarrierCodeToSCAC.get(CAR.Code, CAR.Code)',
                CAD07='2I', 
                CAD08='@CAR.PickupReferenceNumber'),
            ),
        # shipment level charges/allowances -- OPTIONAL
        SAC=Seg(
            _Y_IF='@CAR.FreightCharge and Decimal(CAR.FreightCharge) > 0.00',
            SAC01='C',
            SAC02='D240',
            SAC05='@fmtStringAsMoney(CAR.FreightCharge)',
            ),
        ISS=Seg(
            ISS01='@Decimal(INV.TotalNumberOfItems).to_integral_value()',
            ISS02='EA',
            ),
        )
      
from badgerEDI.rules import *

contentRules = [         
    ('ST',                          RReqs('ST01', 'ST02', 'BIG', 'REF', 'N1[2]', 'IT1[1-1000]', 'TDS', 'CAD')),
    #################
    ('ST.ST01',                     RMustBe('810')),
    
    ('ST.BIG',                      RReqs('BIG01', 'BIG02', 'BIG04')),
       
    ('ST.REF',                      RReqs('_IVN')),
    ('ST.REF*',                     RReqs('REF01', 'REF02')),
    ('ST.REF?_IVN.REF01',           RMustBe('IA')),
    
    ('ST.N1',                       RReqs('_ST','_RI')),
    ('ST.N1?_ST',                   RReqs('N101', 'N102', 'N103', 'N104')),
    ('ST.N1?_ST.N101',              RMustBe('ST')),
    ('ST.N1?_ST.N103',              RMustBe('92')),
    ('ST.N1?_RI',                   RReqs('N101', 'N102')),
    ('ST.N1?_RI.N101',              RMustBe('RI')),
    
    ('ST.IT1*',                     RReqs('IT103', 'IT104', 'IT106', 'IT107', 'PID')),
    ##################
    ('ST.IT1*',                     RAtomic('IT107', 'IT108')),
    ('ST.IT1*.IT106',               RMustBe('UP')),                
    ('ST.IT1*.IT108',               RMustBe('VA')),
    
    ('ST.IT1*.PID',                 RReqs('_PRD')),
    ('ST.IT1*.PID?_PRD',            RReqs('PID01', 'PID05')),
    ('ST.IT1*.PID?_PRD.PID01',      RMustBe('F')),
    
    ('ST.TDS',                      RReqs('TDS01')),   

    ('ST.CAD',                      ROneOf('_BOLN', '_TRCKN')),
    ('ST.CAD*',                     RReqs('CAD04', 'CAD07', 'CAD08')),
    ('ST.CAD?_BOLN.CAD07',          RMustBe('BM')),
    ('ST.CAD?_TRCKN.CAD07',         RMustBe('2I')),
    ]

