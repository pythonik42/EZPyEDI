'''
Classes and functions to support generation of X12 SH856 docs

@author: jknaus
'''

from badgerEDI import eLog

from badgerEDI.bedislib import *
from badgerEDI.ediutil import *

from bots.transform import *

#===============================================================================
# These functions are invoked from the docMaps at evaluation time
#===============================================================================

def qtyShippedInShipment(ship):
    # count up total number of pieces in Shipment
    qty = 0
    for so in ship.SalesOrders:
        qty += qtyShippedInSalesOrder(so)
    return qty

def qtyShippedInSalesOrder(so):
    # count up total number of pieces in Sales Order
    qty = 0
    for line in so.ShipmentLines:
        if line.QuantityShipped:
            qty += line.QuantityShipped
    return qty  # for line item


#===============================================================================
# HL id generator
#===============================================================================
class ASNIdGenerator:
        
    def __init__(self):
        self.HSLevel1ID = 0
        self.HSLevel2ID = 0
        self.HSLevel3ID = 0
        self.HSLevel4ID = 0
        
        self.HLCounter = 0  # the current unique HL id number
    
    def nextHSLevel1ID(self):
        self.HLCounter += 1
        self.HSLevel1ID = self.HLCounter
        return self.HSLevel1ID
                       
    def lastHSLevel1ID(self):
        return self.HSLevel1ID
    
    def nextHSLevel2ID(self):
        self.HLCounter += 1
        self.HSLevel2ID = self.HLCounter
        return self.HSLevel2ID
                       
    def lastHSLevel2ID(self):
        return self.HSLevel2ID
        
    def nextHSLevel3ID(self):
        self.HLCounter += 1
        self.HSLevel3ID = self.HLCounter
        return self.HSLevel3ID
                       
    def lastHSLevel3ID(self):
        self.HSLevel3ID 
        return self.HSLevel3ID
    
    def nextHSLevel4ID(self):
        self.HLCounter += 1
        self.HSLevel4ID = self.HLCounter
        return self.HSLevel4ID
                       
    def lastHSLevel4ID(self):
        return self.HSLevel4ID
    
#=======================================================================================================================
# Packing details manager
#=======================================================================================================================
class PackingDetailsMgr:
    
    def __init__(self):
        self.palletNum = 1
        self.numCases = dict()              # keyed by psNum
        self.caseIDsOnPS = dict()           # keyed by psNum
        self.packsByCaseID = dict()         # keyed by unique caseID
        
        self.currCaseID = None
        self.currPSNum = None
        self.currOrder = None
        
    def addNewOrder(self, order):
        psNum = order.PackingSlipNumber 
        self.caseIDsOnPS[psNum] = dict()  # to store caseIDs
        self.numCases[psNum] = 0
        
        self.currCaseID = None
        self.currOrder = order
        self.currPSNum = psNum
        
        eLog.info('New order %s added with PS number %s.' % (
            order.Number, order.PackingSlipNumber))
    
    def addNewCaseToOrder(self, order=None):
        
        if not order:
            order = self.currOrder
        if order:
            psNum = order.PackingSlipNumber

            # get next case number in sequence for current order and gen caseID
            self.numCases[psNum] += 1
            seqNum = self.numCases[psNum]
            caseLabelNum = order.Number.zfill(10)+'00001'+str(seqNum).zfill(2)
            checkDigit = transform.calceancheckdigit(caseLabelNum)
            caseLabelNum += checkDigit
            
            # init dict to store pack qtys by UPC for newly added case
            self.packsByCaseID[caseLabelNum] = dict()     # keyed by UPC
            
            # add to list of caseIDs on this Order (PS)
            self.caseIDsOnPS[psNum][seqNum] = caseLabelNum
            
            # update curr values
            self.currCaseID = caseLabelNum
            self.currOrder = order
            self.currPSNum = order.PackingSlipNumber

            eLog.info('Added new case %s (seq %s) to order %s with PS number %s.' % (
                caseLabelNum, seqNum, order.Number, order.PackingSlipNumber))
            return caseLabelNum
        else:
            eLog.info('No order specified and no current order is set.')
            return None
    
    def addPackedItemToCase(self, shipItem, qty, caseID=None):
        if not caseID:
            caseID  = self.currCaseID
        if caseID: 
            self.currCaseID = caseID
            self.packsByCaseID[caseID][shipItem] = qty
        else:
            eLog.info('Unknown or unspecified case ID: %s', caseID)
            
    def getCaseIDByOrderAndCaseNum(self, caseSeqNum, order=None):
        if not order:
            order = self.currOrder
        psNum = None
        if order:
            psNum = order.PackingSlipNumber
        else:
            eLog.info('No order specified or current.')
            return None
            
        if psNum:
            caseIDs = self.caseIDsOnPS.get(psNum, None)
            caseID = caseIDs and caseIDs.get(caseSeqNum, None)
            if caseID:
                self.currCaseID = caseID
                self.currOrder = order
                self.currPSNum = psNum
            eLog.info('Found case number %s attached to order %s with PS number %s.' % (
                caseID, order.Number, order.packingSlipNumber))
            return caseID
        else:
            eLog.info('No packing slip number associated with order %s.', order.Number)
            return None
    
    def uniqueCaseLabelNumber(self, psNum, caseSeqNum):
        caseLabelNumber = "00{0!s:0>10}0000{1!s}{2!s:0>2}".format(
                            psNum, self.palletNum, caseSeqNum)
        caseLabelNumber = addeancheckdigit(caseLabelNumber)
        return caseLabelNumber
    
    def getCaseIDsOnPS(self, psNum=None):
        if not psNum:
            psNum  = self.currPSNum
        return sorted(self.caseIDsOnPS[psNum].values())
            
    def getPacksInCase(self, caseID=None):
        if not caseID:
            caseID = self.currCaseID
        return sorted(self.packsByCaseID[caseID].keys())
    
    def getQtyPacked(self, shipItem, caseID=None):
        if not caseID:
            caseID = self.currCaseID
        return self.packsByCaseID[caseID][shipItem]

        
class SNEdiMgr(EdiMgr):
    
    def __init__(self, joDocType=None, joRefNum=None):
        super(SNEdiMgr, self).__init__(joDocType, joRefNum)
    
    def addAdditionalShipmentAttributes(self, ediTx, shipments, masterShipment, dateToday, timeNow, partnerID, vendorID):
        
        TX = ediTx
        SHIPS = shipments
        SHIPM = masterShipment
        
        # perform pre-processing of the Master Shipment
        for shipment in SHIPS:
            salesOrder = shipment.Order
            salesOrder.Shipment = shipment

            # need this at the ShipmentDetails level for looping in Orders at HL2 during evaluation
            salesOrder.ShipTo = shipment.ShipTo
        
            # strip off shipoTo suffix appended to drop shipment/alternate locations PO numbers
            if salesOrder.PONumber and '-' in salesOrder.PONumber:  
                (originalPO, locationID) = salesOrder.PONumber.split('-',1)
                salesOrder.PONumber = originalPO  # now PO number matches customer's PO number
                        
            # counters for X12 SN856 doc
            numShipped = Decimal('0')
            
            # reorganize raw WoredPad note values as dictionaries of values keyed by var name
            salesOrder.ExtraEdiInfo = self.getExtraEdiValuesDict(salesOrder.ExtraEdiInfo)
            
            # collect case packing details into PDMgr
            PDMgr = PackingDetailsMgr()
            
            # FIXME: brute force hack--> num of cartons hardcoded to 1
            salesOrder.NumberOfCartons = 1
            # never executes this code
            if salesOrder.NumberOfCartons > 1:    
                eLog.error(
                    'Shipment NumberOfCarton (%s) > 1;  We DO NOT currently support multi-carton orders.' 
                    % shipment.NumberOfCartons)
                raise Exception
            else:
                # add all items on Order to case #1, our only carton
                PDMgr.addNewOrder(salesOrder)
                # returns case label number and makes this the current case
                caseID = PDMgr.addNewCaseToOrder()
                # add each line item to the current case             
                for IT in salesOrder.LineItems:
                    PDMgr.addPackedItemToCase(IT, IT.QuantityShipped or '0')
                    numShipped += Decimal(IT.QuantityShipped or '0')
            
            shipment.NumberOfPieces = salesOrder.NumberOfCartons   # update total number of packages shipped
            shipment.NumberOfLineItems = len(salesOrder.LineItems) # update total number of line items in X12 doc
        
            salesOrder.ExtraPackingDetails = PDMgr               # save the case pack details with the salesOrder
            
            # map ExtraEdiValues from salesOrder to Business Object tree
            # note: eventually these will be populated from Jomar table data by the 
            # edi_GenShippingNoticeXML stored proc and will arrive as structured XML values like everything else 
            eeInfoMappings = [
                (shipment.Carrier,     'RoutingNumber',                'ShipmentRoutingNum'),
                (shipment.Carrier,     'BOLNumber',                    'CarrierBOL'),
                (shipment,             'Cubes',                        'Cubes'),
                (shipment,             'EstimatedDeliveryDate',        'EstDeliveryDate'),
                (shipment,             'ScheduledDeliveryDate',        'SchedDeliveryDate'),
                (shipment,             'TPBillingAcct',                'TPBillingAcct'),
                ]
            for (bo, dynOKey, eeInfoKey) in eeInfoMappings:
                if bo:
                    bo[dynOKey] = salesOrder.ExtraEdiInfo.get(eeInfoKey, None)

        # update shipment 'master' with consolidated values from orders
        if SHIPS:
            SHIP1 = SHIPS[0]
        else:
            eLog.error('Fatal error! No Shipments found in ShippingNotice xml file.')
            raise Exception
        
        SHIPM.update(
            DynO(
                # shipment values from first order
                MasterBOL               = SHIP1 and SHIP1.MasterBOL,
                ShipDate                = SHIP1 and SHIP1.ShipDate,
                ShipTime                = SHIP1 and SHIP1.ShipTime,
                EstimatedDeliveryDate   = SHIP1 and SHIP1.EstimatedDeliveryDate,
                ScheduledDeliveryDate   = SHIP1 and SHIP1.ScheduledDeliveryDate,
                TPBillingAcct           = SHIP1 and SHIP1.TPBillingAcct,
                X12MethodOfPayment      = SHIP1 and SHIP1.X12MethodOfPayment,
                
                # refs to first Order, its ShipTo and Carrier info
                Order                   = SHIP1 and SHIP1.Order,   # ref to order
                ShipTo                  = SHIP1 and SHIP1.ShipTo,  # ref to ship to
                Carrier                 = SHIP1 and SHIP1.Carrier, # ref to carrier
    
                # calculated values
                NumberOfPallets         = '1',
                NumberOfCartons         = sumAllInt(SHIPS, 'NumberOfCartons'),
                Weight                  = sumAllDecimal(SHIPS, 'Weight'),
                FreightCharge           = sumAllMoney(SHIPS, 'FreightCharge'),
                TotalValue              = sumAllMoney(SHIPS, 'TotalValue'),
                NumberOfLineItems       = sumAllInt(SHIPS, 'NumberOfLineItems'),
                Cubes                   = sumAllDecimal(SHIPS, 'Cubes'),
                )
            )
        
        # formatting fixups
        SHIPM.TotalValue = fmtStringAsMoney(SHIPM.TotalValue)
        
        # set delivery estimates if not supplied by CSRs in SO EEVs
        SHIPM.EstimatedDeliveryDate = SHIPM.EstimatedDeliveryDate or SHIPM.Order.PromiseDate or dateToday
        SHIPM.ScheduledDeliveryDate = SHIPM.ScheduledDeliveryDate or SHIPM.Order.PromiseDate

        # gather doc identification data
        invNums = [s.Order.InvoiceNumber for s in (SHIPS or list())]
        TX.InvoiceNumsTxt = ','.join(invNums)   
        ordNums = [s.Order.Number for s in (SHIPS or list())]
        TX.OrderNumsTxt = ','.join(ordNums)
        
        SHIPM.EdiDocType = 'XMLJoShippingNotice'
        SHIPM.EdiDocID = 'JASN%s(SO%s)' % (TX.InvoiceNumsTxt, TX.OrderNumsTxt)
        SHIPM.EdiDocDate = SHIPM.ShipDate
        SHIPM.EdiFromPartnerID = partnerID
        SHIPM.EdiToPartnerID = vendorID
        SHIPM.EdiDateProcessed = dateToday
        SHIPM.EdiTimeProcessed = timeNow
        SHIPM.ShipmentDetails = SHIPS
        
        # set eMgr doc ref number
        self.refNum = TX.OrderNumsTxt



