from badgerEDI.indentation import Indentation

from badgerEDI import eLog
 
from badgerEDI.bedislib import dictLike

from pprint import pformat, pprint

DEBUG_DMERGE = False

def tprint(tree, indent):
    treeTxt = pformat(tree, 5)
    treeLines = treeTxt.split('\n')
    for line in treeLines:
        if DEBUG_DMERGE: 
            eLog.debug('%s%s', indent, line)

def merge_dictionary(dst, src):
    if DEBUG_DMERGE: 
        indent = Indentation(' '*5, '')
    stack = [(dst, src, 0)] 
    while stack: 
        current_dst, current_src, level = stack.pop()
        if DEBUG_DMERGE: 
            indent.setLevel(level)
            eLog.debug( '%sPOP dst=' , indent)
            tprint(current_dst, indent)
            eLog.debug( '%s--- src=', indent)
            tprint(current_src, indent)
        for key in current_src.keys(): 
            if DEBUG_DMERGE: 
                eLog.debug( '%sChecking for key \'%s\' in dst' , indent, key)
            if key not in current_dst.keys(): 
                if DEBUG_DMERGE: 
                    eLog.debug( '%sNot found, so adding %s=%s', indent, key, current_src[key])
                current_dst[key] = current_src[key] 
            else:
                if DEBUG_DMERGE: 
                    eLog.debug( '%sFound key!', indent)
                if ( (isinstance(current_src[key], dict) or isinstance(current_src[key], dictLike)) and 
                     (isinstance(current_dst[key], dict) or isinstance(current_dst[key], dictLike))):
                    if DEBUG_DMERGE: 
                        eLog.debug( '%sNeed to merge subtreees', indent)
                        eLog.debug( '%sPUSH dst=',indent)
                        tprint(current_dst[key], indent)
                        eLog.debug( '%s---- src=', indent)
                        tprint(current_src[key], indent)
                    stack.append((current_dst[key], current_src[key], level+1)) 
                else:
                    if DEBUG_DMERGE: 
                        eLog.debug( '%sReplacing \'%s\' value:', indent, key)
                        eLog.debug( '%s  Was %s=%s', indent, key, str(current_dst[key]))
                        eLog.debug( '%s  Now %s=%s', indent, key, str(current_src[key]))
                    current_dst[key] = current_src[key] 
    return dst 

 
if __name__ == '__main__': 

    dst = dict(a=1,b=2,c=dict(ca=31, cc=33, cd=dict(cca=1)), d=4, f=6, g=7) 
    print 'Destination dictionary:'
    pprint(dst)
     
    src = dict(b='u2',c=dict(cb='u32', cc=dict(x=1, y=2), cd=dict(cda=dict(cdaa='u3411', cdab='u3412'))), e='u5', h=dict(i='u4321')) 
    print 'Source dictionary:'
    pprint(src) 
    
    r = merge_dictionary(dst, src)
    print 'Merged dictionary:'
    pprint(r) 
     
    #    assert r is dst 
    #    assert r['a'] == 1 and r['d'] == 4 and r['f'] == 6 
    #    assert r['b'] == 'u2' and r['e'] == 'u5' 
    #    assert dst['c'] is r['c'] 
    #    assert dst['c']['cd'] is r['c']['cd'] 
    #    assert r['c']['cd']['cda']['cdaa'] == 'u3411' 
    #    assert r['c']['cd']['cda']['cdab'] == 'u3412' 
    #    assert r['g'] == 7 
    #    assert src['h'] is r['h'] 
 
