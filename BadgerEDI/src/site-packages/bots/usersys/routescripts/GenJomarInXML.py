# routescript
'''
This route script generates XML files (JoInvoice and JoShippingNotice)
for Sales Orders that have been recently invoiced by Jomar.

@author: jknaus
'''

from badgerEDI import eLog

from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.sql import func

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

import bots.transform as transform
from bots.botsconfig import *
import bots.botsglobal
from bots.botslib import txtexc

import copy
import time
from datetime import date 

_XMLRouteScriptInitialized = None


# returns list of OrderTracking recs from MBOL indentifying info
def getAllOrderTrackingRecsForMBOL(mbolIDRow):
    (bizNum, plantNum, joCustomer, mbolNumber) = tuple(mbolIDRow)
    return Session.query(JoEDIOrderTracking).filter_by(
        JomarBizNum=bizNum,JomarPlantNum=plantNum,CustomerSoldToID=joCustomer,MasterBOLNumber=mbolNumber)

# returns single OrderTracking rec from Invoice identifiying info
def getOrderTrackingRecForInvoice(invIDRow):
    (bizNum, plantNum, joCustomer, invNum) = tuple(invIDRow)
    return Session.query(JoEDIOrderTracking).filter_by(
        JomarBizNum=bizNum,JomarPlantNum=plantNum,CustomerSoldToID=joCustomer,JomarInvoiceNumber=invNum).first()
    
def debugList(title, lvals):
    eLog.debug('List %s: --------------', title)
    for elem in lvals:
        eLog.debug('\t%s', elem) 
    eLog.debug('---------------------------')

def start(routedict):
   
    eLog.info('Executing routscript for GenJomarInXML')
    
    DISABLE_OT_UPDATES = bots.botsglobal.ini.get('settings','disableordertrackingupdates', False)
    if DISABLE_OT_UPDATES:
        eLog.info('*** NO OTRK UPDATES ****** Warning: All edi_OrderTracking table updates have been DISABLED for testing! ******')

    # DateToday = date.today().strftime("20%y%m%d")
    # TimeNow = time.strftime('%H%M')
    # eLog.debug('Date %s, Time %s' % (DateToday, TimeNow))
    
    global _XMLRouteScriptInitialized
    if not _XMLRouteScriptInitialized: 
        
        #===============================================================================
        # generate new XML content files from Jomar DB
        # and place in directory /EDI/Jomar/IN
        #===============================================================================    
        eLog.info('=== Extracting XML DB content for outgoing EDI doc generation ===')
        createdINs = 0
        createdASNs = 0
        createdCrossDockASNs = 0
        
        ediDataDir = bots.botsglobal.ini.get('directories','edidataroot')
        eLog.info('New XML files will be created in directory /%s/JOMAR/IN', ediDataDir)
        
        dateToday = date.today().strftime("20%y%m%d")
        
        TPartnerInfoByJoCustomer = partnerValue('ALL', 'TPartnerInfoByJoCustomer') # get the CC to retrieve partner IDs
        
        try:
            # update values in the edi_OrderTracking table to reflect current Jomar DB state
            eLog.info('Update OrderTracking table values to reflect latest Jomar DB changes.')
            Session.begin(subtransactions=True)
            execSP(Session, 'dbo.edi_ApplyJomarUpdatesToOrderTracking')
            Session.commit()
            
            # determine Invoices ready to be exported from Jomar as XML content files
            Session.begin(subtransactions=True)
            invoiceIDList = execSP(Session, 'dbo.edi_ReadyToGenIN810')
            # debugList('invoiceIDList', invoiceIDList)
            Session.commit()

            # loop over list of Jomar InvoiceNums, creating JoInvoice_*.xml files
            for invIDRow in invoiceIDList:
                try:
                    Session.begin(subtransactions=True)
                    otrk = getOrderTrackingRecForInvoice(invIDRow)
                    
                    # retrieve the partner ID
                    customerNum = otrk.CustomerSoldToID 
                    partnerInfo = TPartnerInfoByJoCustomer.get(customerNum, None)
                    if partnerInfo:
                        tpID = partnerInfo['TPartner']
                        tpIDQ = partnerInfo['TPartnerQualifier']
                        testIndicator = partnerInfo.get('TestIndicator', 'P') 
                    else: 
                        eLog.error('Could not locate TPartnerInfoByJoCustomer[%s] in partnerALL CC file', 
                            customerNum)
                        eLog.error('Outgoing EDI docs WILL NOT BE GENERATED for JoCustomer %s until added to the CC file.', 
                            customerNum)
                        raise
                    eLog.debug('Extracting JoInvoice %s DB content (for Order %s-%s) from Jomar [for TP %s.%s].',
                        otrk.JomarInvoiceNumber, otrk.JomarOrderType, otrk.JomarOrderNumber, tpID, tpIDQ)
    
                    # execute SP edi_genInvoiceXML
                    ixRows = execSP(Session, "dbo.edi_GenInvoiceXML '%s', '%s', '%s', '%s'" %  
                                (tpID, tpIDQ, otrk.JomarInvoiceNumber, testIndicator))
                    invXMLText = ixRows[0][0]
                    # store XML string in file JoInvoice_<InvoiceNum>.xml
                    xmlFileName = '/'+ediDataDir+'/JOMAR/IN/JoInvoice_IN'+otrk.JomarInvoiceNumber+'.xml'
                    eLog.info('Creating XML file: %s' % (xmlFileName,))
                    xmlFile = open(xmlFileName, 'w')
                    xmlFile.write(invXMLText)
                    xmlFile.close()    
                    
                    ### TODO: Fix This!!!!!!!!!!!!    Does not work!!!!!!!!!!
                    ## Also need to update 
                    if not DISABLE_OT_UPDATES:
                        eLog.info('Updating edi_OrderTracking record for: Order %s-%s (IN %s)' , 
                            otrk.JomarOrderType, otrk.JomarOrderNumber, otrk.JomarInvoiceNumber)
                        # update edi_OrderTracking table with DateInvoiceSent and update generateXML flag
                        otrk.DateInvoiceSent = dateToday
                        if otrk.GenerateXML=='A':  # if 'A'll docs needed to be generated
                            otrk.GenerateXML = 'S' # still need to gen 'S'hipping notice
                        else:
                            otrk.GenerateXML = 'N' # no more docs left to generate
    
                    Session.commit()
                    createdINs += 1
                except:
                    txt=txtexc()
                    eLog.error('Processing failed for Invoice %s! \n%s\n Processing next entry.', invIDRow, txt)
                    Session.rollback()
                    continue

            # determine Invoices ready to be exported from Jomar as Direct Ship ASN XML content files
            Session.begin(subtransactions=True)
            invoiceIDList = execSP(Session, 'dbo.edi_ReadyToGenSH856')
            # debugList('invoiceIDList', invoiceIDList)
            Session.commit()

            # loop over list of Jomar InvoiceNums, creating JoShippingNotice_*.xml file for each one
            for invIDRow in invoiceIDList:
                try:
                    Session.begin(subtransactions=True)
                    otrk = getOrderTrackingRecForInvoice(invIDRow)
                    
                    # retrieve the partner ID
                    customerNum = otrk.CustomerSoldToID 
                    partnerInfo = TPartnerInfoByJoCustomer.get(customerNum, None)
                    if partnerInfo:
                        tpID = partnerInfo['TPartner']
                        tpIDQ = partnerInfo['TPartnerQualifier']
                        testIndicator = partnerInfo.get('TestIndicator', 'P') 
                    else: 
                        eLog.error('Could not locate TPartnerInfoByJoCustomer[%s] in partnerALL CC file', 
                            customerNum)
                        eLog.error('Outgoing EDI docs WILL NOT BE GENERATED for JoCustomer %s until added to the CC file.', 
                            customerNum)
                        raise
                    eLog.debug('Extracting JoShippingNotice IN%s DB content (for Order %s-%s) from Jomar [for TP %s.%s].',
                        otrk.JomarInvoiceNumber, otrk.JomarOrderType, otrk.JomarOrderNumber, tpID, tpIDQ)
    
                    # execute SP edi_genShippingNoticeXML
                    ixRows = execSP(Session, "dbo.edi_GenShippingNoticeXML '%s', '%s', '%s', NULL, NULL, '%s'" %  
                                (tpID, tpIDQ, otrk.JomarInvoiceNumber, testIndicator))
                    invXMLText = ixRows[0][0]
                    # store XML string in file JoShippingNotice_IN<InvoiceNum>.xml
                    xmlFileName = '/'+ediDataDir+'/JOMAR/IN/JoShippingNotice_IN'+otrk.JomarInvoiceNumber+'.xml'
                    eLog.info('Creating XML file: %s' % (xmlFileName,))
                    xmlFile = open(xmlFileName, 'w')
                    xmlFile.write(invXMLText)
                    xmlFile.close()    

                    if not DISABLE_OT_UPDATES:
                        eLog.info('Updating edi_OrderTracking record for: Order %s-%s (IN %s)' , 
                            otrk.JomarOrderType, otrk.JomarOrderNumber, otrk.JomarInvoiceNumber)
                        # update edi_OrderTracking table with DateASNSent and update generateXML flag
                        otrk.DateASNSent = dateToday
                        if otrk.GenerateXML=='A':  # if 'A'll docs needed to be generated
                            otrk.GenerateXML = 'I' # still need to gen 'I'nvoice (very unlikely, unless code above failed)
                        else:
                            otrk.GenerateXML = 'N' # no more docs left to generate
    
                    Session.commit()
                    createdASNs += 1
                except:
                    txt=txtexc()
                    eLog.error('Processing failed for ASN %s! \n%s\n Processing next entry.', invIDRow, txt)
                    Session.rollback()
                    continue

            # determine 'Cross Dock' ASNs ready to be exported from Jomar as XML content files
            # a cross dock ASN will contain multiple 'Shipments' which will be be shipped to
            # a central warehouse/distribution center (the cross dock) from where the individual
            # sub-shipments will be forwarded on to their final destinations
            Session.begin(subtransactions=True)
            mbolIDList = execSP(Session, 'dbo.edi_ReadyToGenCrossDockSH856')
            # debugList('mbolIDList', mbolIDList)
            Session.commit()
           
            # loop over list of rows containing sets of unique Jomar (customer, MBOLNum)s, creating JoShippingNotice_*.xml files
            for mbolIDRow in mbolIDList:
                try:
                    Session.begin(subtransactions=True)
                    otrk = getAllOrderTrackingRecsForMBOL(mbolIDRow)
                    # retrieve the partner ID
                    customerNum = otrk[0].CustomerSoldToID  # all rows will have same JoCustomer ID
                    partnerInfo = TPartnerInfoByJoCustomer.get(customerNum, None)
                    if customerNum and partnerInfo:
                        tpID = partnerInfo['TPartner']
                        tpIDQ = partnerInfo['TPartnerQualifier']
                        testIndicator = partnerInfo.get('TestIndicator', 'P') 
                    else: 
                        eLog.error(
                            'Could not locate TPartnerInfoByJoCustomer[%s] in bots/usersys/CC/partnerALL file' % (
                                customerNum,))
                        eLog.error(
                            'Outgoing EDI docs WILL NOT BE GENERATED for JoCustomer %s until added to the CC file.' % (
                                customerNum,))
                        raise
                    
                    eLog.debug('  Extracting CrossDock JoShippingNotice DB content from Jomar for MBOL %s[for TP %s.%s].' % (
                        otrk[0].MasterBOLNumber, tpID, tpIDQ))
                    # execute SP edi_genCrossDockShippingNoticeXML for the PO
                    ixRows = execSP(Session, "dbo.edi_GenShippingNoticeXML '%s', '%s', NULL, '%s', '%s', '%s'" %  
                                    (tpID, tpIDQ, otrk[0].MasterBOLNumber, otrk[0].CrossDockLocID, testIndicator))
                    asnXMLText = ixRows[0][0]
                    # store XML string in file JoShippingNotice_MBOL<MBOLNum>.xml
                    xmlFileName = '/'+ediDataDir+'/JOMAR/IN/JoShippingNotice_MBOL'+otrk[0].MasterBOLNumber+'.xml'
                    eLog.info('Creating XML file: %s' % (xmlFileName,))
                    xmlFile = open(xmlFileName, 'w')
                    xmlFile.write(asnXMLText)
                    xmlFile.close()
                    
                    if not DISABLE_OT_UPDATES:
                        eLog.info('Updating edi_OrderTracking records for: Orders generated from CrossDock MBOL %s', 
                            otrk[0].MasterBOLNumber)
                        # update tracking recs for all orders in this consolidated cross dock shipment
                        for otRec in otrk:
                            # update edi_OrderTracking table with DateASNSent and reset generateXML flag
                            # set edi doc generation dates to today's date
                            otRec.DateASNSent = dateToday
                            if otRec.GenerateXML=='A':  # if [A]ll docs needed to be generated
                                otRec.GenerateXML = 'I' # still need to gen [I]nvoice 
                                                        # note: unlikely b/c inv was probably generated in prior steps
                            else:
                                otRec.GenerateXML = 'N' # no more docs left to generate
                                
                    Session.commit()
                    createdCrossDockASNs += 1
                except:
                    txt=txtexc()
                    eLog.error('Processing failed for CrossDock ASN w/ MBOL %s! \n%s\n Processing next entry.', mbolIDRow, txt)
                    Session.rollback()
                    continue
            
            eLog.info('Successfully created %s INs, %s ASNs, and %s CrossDockASNs in directory /%s/JOMAR/IN',
                createdINs, createdASNs, createdCrossDockASNs, ediDataDir)
            
        except:
            txt=txtexc()
            eLog.error('High level XML generation processing failed!\n%S\n  Aborting.', txt)
            Session.rollback()
        finally:
            Session.close()
            
        # ediDataDir = 'C:\\'+bots.botsglobal.ini.get('directories','channels')
        # eLog.info('Incoming XML files ready to be processed...')
        # show list of all Jo*_*.xml files in /EDI/Jomar/IN
        # import subprocess
        # eLog.info(subprocess.call(['cmd', '/c', 'dir '+ediDataDir+'\\JOMAR\\IN']))
        
        _XMLRouteScriptInitialized = 1
