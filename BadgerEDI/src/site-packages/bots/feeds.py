# Ref:
# http://www.djangobook.com/en/2.0/chapter13/
# https://docs.djangoproject.com/en/1.1/ref/contrib/syndication/
from badgerEDI import eLog
from bots.models import ta, partner
from botsconfig import *
import django

if django.VERSION >= (1, 2):
    from django.contrib.syndication.views import Feed
else:
    from django.contrib.syndication.feeds import Feed

from django.core.exceptions import ObjectDoesNotExist
from django.shortcuts import render_to_response
from django.shortcuts import get_object_or_404
from django.db.models import Q

class EdiFeed(Feed):
    title = "Badger EDI Log"
    link = "/feeds/edi/"
    description = "Badger EDI Activity"
    title_template = 'bots/EdiRssFeedTitle.html'
    description_template = 'bots/EdiRssFeedEntry.html'
    author_name = 'BEDI: The Badger EDI System'
    author_email = 'TracIT@badgersportswear.com'
    
    partneridToCat = {
        'SPSMCX':       'MCX', 
        '130630494':    'DUNHAMS', 
        'TESTNEXCOMLD': 'NEXCOM TEST',
        }
    
    def __init__(self, feed, request):
        return super(EdiFeed, self).__init__(feed, request)
    
    def item_categories(self, item):
        cats = list()

        if item.frompartner=='7048710990':
            cats.append('@ Outgoing EDI')
            if item.topartner in self.partneridToCat:
                cats.append('= '+self.partneridToCat[item.topartner])
        else:
            cats.append('@ Incoming EDI')
            if item.frompartner in self.partneridToCat:
                cats.append('= '+self.partneridToCat[item.frompartner])
                
        if item.docType:
            cats.append('# '+item.docType)
            
        return cats
                
    def item_pubdate(self, item):
        return item.ts
    
    def get_object(self, request, bits):
        # In case of "/rss/edi/incoming/yadaya/xxxyyy", or other such clutter...
        if len(bits) > 1:
            raise ObjectDoesNotExist
        if len(bits):
            return self.items(bits[0])
                   
    def items(self, obj=None):
        if obj:
            item = ta.objects.filter(idta__exact=obj)[0]
            if not item:
                raise ObjectDoesNotExist
            else:
                return item
        else:     
            itList = ta.objects.filter( ( ~Q(messagetype__startswith='997') & 
                                           Q(idroute='ProcessInEDI') & Q(status=SPLITUP) ) |
                                        ( ~Q(messagetype__startswith='997') & 
                                           Q(idroute='ProcessInXML') & Q(status=TRANSLATED) ) ).order_by('-ts')[:20]
            for it in itList:
                self.createEdiTitleFor(it)
            return itList
    
    def createEdiTitleFor(self, it):
    
        # add human description of what sort of transaction was sent/received
        it.docType = None
        if it.frompartner=='7048710990':   # from Badger EDI
            it.ediDirection = 'OUT'
            ediDirectionText = 'Outgoing'
            ediDirectionIndicator = '[EDI]-->'
            activity = 'to'
            
            if it.topartner and it.topartner != '*':
                partnerO = partner.objects.get(idpartner__exact=it.topartner)
            it.ediPartnerName = partnerO.name or '???'
            it.ediPartnerID = it.topartner
                
        else:
            it.ediDirection = 'IN'
            ediDirectionText = 'Incoming'
            ediDirectionIndicator = '[EDI]<--'
            activity = 'from'
                        
            if it.frompartner and it.frompartner != '*':
                partnerO = partner.objects.get(idpartner__exact=it.frompartner)
            it.ediPartnerName = partnerO.name or '???'
            it.ediPartnerID = it.frompartner
                
        if it.messagetype:
            if it.messagetype.startswith('810'):
                it.docType = 'Invoice 810'
            if it.messagetype.startswith('856'):
                it.docType = 'ASN 856'
            if it.messagetype.startswith('850'):
                it.docType = 'PO 850'
            if it.messagetype.startswith('860'):
                it.docType = 'PO Change 860'
            if it.messagetype.startswith('997'):
                it.docType = 'Ack 997'
            if it.messagetype.startswith('x12'):
                it.docType = 'Unknown X12'
            if it.docType:
                if it.botskey:
                    # build entry title text from self.botskey => '%s|%s_%s' % (templateName, partnerID, docID)
                    ediDocInfo = it.botskey
                    (ediDocType, ediDocID) = ediDocInfo.split('|')
                    (partnerID, docID) = ediDocID.split('_')
                    it.ediTitleText = '%s%s %s: %s' % (ediDirectionIndicator, partnerID, it.docType, docID)
                else:
                    it.ediTitleText = '%s%s %s' % (ediDirectionIndicator, it.ediPartnerID, it.docType)

                
            

