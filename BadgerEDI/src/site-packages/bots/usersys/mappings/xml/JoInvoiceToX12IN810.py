#mapping-script
from badgerEDI import eLog

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

from badgerEDI.treeops import *

from bots.transform import *

from datetime import *
from decimal import *
from traceback import *
from urllib import *
import time

from X12IN810Lib import *
 
#===============================================================================
# Main mapping function for EDI X12 IN810 Outgoing
#===============================================================================

def main(inn, out):

    DateToday = date.today().strftime("20%y%m%d")
    TimeNow = time.strftime('%H%M', time.localtime())
    eLog.info('JoInvoiceToX12IN810 mapping script processing: Date %s, Time %s', 
        DateToday, TimeNow)
    
    partnerID = inn.ta_info['topartner']
    vendorID = inn.ta_info['frompartner']
    DocReferenceID = out.ta_info['reference']
    messageType = out.ta_info['messagetype']
    ediType = out.ta_info['editype']
    eLog.info('Generating EDI %s IN%s doc %s for partner %s from vendor %s', 
        ediType, messageType, DocReferenceID, partnerID, vendorID)

    eMgr = INEdiMgr('SO', '???')        # we don't know doc reference number yet
    eMgr.startProcessingDoc()
    eMgr.startLogCapture(eLog)
    
    # tree of get() transform ops specifying how to convert an 'inn' XML DB content tree to 
    # a normalized Invoice data model (tree)
    inDocTransformTree = DocGetOpsTree(
        inn, 
        'EdiTx.Invoice',
        Plant               = 'Plant',
        Number              = 'Number',
        Date                = 'Date',
        TotalValue          = 'TotalValue',
        TOSNetDueDate       = 'TOSNetDueDate',
        TOSNetDaysDue       = 'TOSNetDaysDue',
        TOSNetDescription   = 'TOSNetDescription',
        SalesOrder = GetOneChildLoop(
            'Invoice.SalesOrder',        
            Type                 = 'Type',
            Number               = 'Number',
            Date                 = 'Date',
            CurrencyCode         = 'CurrencyCode',
            ExtraEdiInfo         = 'ExtraEdiInfo',
            ),
        PurchaseOrder = GetOneChildLoop(
            'Invoice.PurchaseOrder',        
            Number               = 'Number',
            Date                 = 'Date',
            ShipToName           = 'ShipToName',
            ShipToLocation       = 'ShipToLocation',
            ),
        SoldTo = GetOneChildLoop(
            'Invoice.SoldTo',        
            Name                = 'Name',
            AddressLine1        = 'AddressLine1',
            AddressLine2        = 'AddressLine2',
            City                = 'City',
            StateOrProvinceCode = 'StateOrProvinceCode',
            PostalCode          = 'PostalCode',
            CountryCode         = 'CountryCode',
            ),
        ShipTo = GetOneChildLoop(
            'Invoice.ShipTo',        
            Name                = 'Name',
            AddressLine1        = 'AddressLine1',
            AddressLine2        = 'AddressLine2',
            City                = 'City',
            StateOrProvinceCode = 'StateOrProvinceCode',
            PostalCode          = 'PostalCode',
            CountryCode         = 'CountryCode',
            ),
        Shipment = GetOneChildLoop(
            'Invoice.Shipment',        
            PackingSlipNumber      = 'PackingSlipNumber',
            ShipDate               = 'ShipDate',
            ShipTime               = 'ShipTime',
            NumberOfPallets        = 'NumberOfPallets',
            NumberOfCartons        = 'NumberOfCartons',
            Weight                 = 'Weight',
            MethodOfPayment        = 'MethodOfPayment',
            FOBQualifier           = 'FOBQualifier',
            FOBLocation            = 'FOBLocation',
            Cubes                  = 'Cubes',              # <-- EEV 'Cubes'
            EstimatedDeliveryDate  = 'EstDeliveryDate',    # <-- EEV 'EstDeliveryDate'
            ScheduledDeliveryDate  = 'SchedDeliveryDate',  # <-- EEV 'SchedDeliveryDate'
            TPBillingAcct          = 'TPBillingAcct',      # <-- EEV 'TPBillingAcct'
            Carrier = GetOneChildLoop(
                'Shipment.Carrier',     
                EquipmentNumber         = 'EquipmentNumber',
                Code                    = 'CarrierCode',
                Name                    = 'CarrierName',
                PickupReferenceNumber   = 'CarrierPickupReferenceNumber',
                PRONumber               = 'CarrierPRONumber',
                FreightCharge           = 'FreightCharge',
                BOLNumber               = 'CarrierBOL',             # <-- EEV 'CarrierBOL'
                RoutingNumber           = 'ShipmentRoutingNum',     # <-- EEV 'ShipmentRoutingNum'   
                ), # Carrier
            ), # Shipment
        LineItems = GetAllChildLoops(
            'Invoice.InvoiceLine',
            _Y_ID                   = 'LineNumber',
            LineNumber              = 'LineNumber',
            Quantity                = 'Quantity',
            UnitOfMeasure           = 'UnitOfMeasure',
            UnitPrice               = 'UnitPrice',
            UPCCode                 = 'UPCCode',
            VendorStyleCode         = 'VendorStyleCode',
            Description             = 'Description',
            Color                   = 'Color',
            Size                    = 'Size',
            RequestedColor          = 'RequestedColor',
            FreightCharges          = 'FreightCharges', 
            ), # LineItem
        ) # Invoice
    
    # now get() the values from the 'inn' XML tree doc to populate the Invoice tree
    Invoice = inDocTransformTree.evaluate(globals(), locals())
    
    if Invoice.SalesOrder:
        Invoice.EdiDocType = 'XMLJoInvoice'        
        Invoice.EdiDocID = 'JoINV%s(SO%s)' % (Invoice.Number, Invoice.SalesOrder.Number)
        Invoice.EdiDocDate = Invoice.Date
        Invoice.EdiFromPartnerID = partnerID
        Invoice.EdiToPartnerID = vendorID
        Invoice.EdiDateProcessed = DateToday
        Invoice.EdiTimeProcessed = TimeNow        
        eMgr.refNum = Invoice.SalesOrder.Number
    else:
        eLog.error('   Fatal error! No Sales Order found for Invoice.')
        
    #===================================================================================================================
    # load Customer and Vendor default values    
    #===================================================================================================================
    Customer = DynO(**partnerValue(partnerID, 'CustomerInfo'))     # Customer default values
    Vendor = DynO(**vendorValue(vendorID, 'VendorInfo'))           # Vendor default values 
        
    # X12 default values loaded from Vendor CC file, then updated with Partner CC file value
    x12base = vendorValue(vendorID, 'ToGen_X12IN810') or dict()
    x12partner = partnerValue(partnerID, 'ToGen_X12IN810') or dict()
    x12base.update(x12partner)
    X12 = DynO(**x12base)
    eMgr.setTPSettings(X12) # needed for validation
    
    # load OutDoc generation and validation rules
    outDocValidationConfig = partnerValidationConfig(partnerID, ediType, messageType)
    eMgr.setOutDocValidationConfig(outDocValidationConfig)     
    
    # convenience variables
    INV = Invoice
    SO = Invoice.SalesOrder
    PO = Invoice.PurchaseOrder
    STO = Invoice.ShipTo
    BTO = Invoice.SoldTo 
    SHIP = Invoice.Shipment
    CAR = SHIP.Carrier
    CUS = Customer
    VEN = Vendor
        
    # adds extraEDIValues at the appropriate spots in the BOM
    eMgr.addAdditionalInvoiceAttributes(INV)
    
    # recursively evaluate ops in tree (depth first) to generate value tree of outDoc content (and bots outmessage)
    eLog.info('Applying parther \'%s\' specified EDI %s IN%s doc transformation rules.', partnerID, ediType, messageType)
    OutDoc = eMgr.generateOutDocContent(out, locals(), globals())

    # DO THIS LAST: must add counts once all other values have been set()
    ctt = out.putloop({'BOTSID':'ST'}, {'BOTSID':'CTT'})
    INV.TotalNumberOfLines = out.getcountoccurrences({'BOTSID':'ST'}, {'BOTSID':'IT1'})
    ctt.put({'BOTSID':'CTT', 'CTT01':INV.TotalNumberOfLines}) 
    segCount = out.getcount() + 1
    out.put({'BOTSID':'ST'}, {'BOTSID':'SE', 'SE01':segCount})  # num of segments produced
    out.put({'BOTSID':'ST'}, {'BOTSID':'SE', 'SE02':DocReferenceID})  
    
    # validate the outgoing doc, errors will be logged to eLog
    OutDoc.EdiDocID = 'IN%s(SO%s)' % (Invoice.Number, Invoice.SalesOrder.Number)
    OutDoc.EdiDocType = 'X12IN810'
    OutDoc.EdiDocDate = Invoice.Date
    OutDoc.EdiPartnerID = partnerID
    OutDoc.EdiFromPartnerID = partnerID
    OutDoc.EdiToPartnerID = vendorID   
    OutDoc.EdiType = ediType
    OutDoc.EdiMessageType = messageType
    OutDoc.EdiDateProcessed = DateToday
    OutDoc.EdiTimeProcessed = TimeNow   
    
    # perform out doc content validation using badgerEDI.rules module
    eMgr.validateOutDocContent(OutDoc)
    eMgr.stopLogCapture(eLog)
    
    # raises error if processing errors were encountered
    eMgr.finishProcessingDoc(OutDoc) 
    
    # saves pickled inn content data tree
    eMgr.finishProcessingEdi(OutDoc, inn.ta_info) 


        
