#mapping-script
from badgerEDI import eLog

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

from bots import *
from bots.botsconfig import *

from datetime import date
import copy
import time
import pickle

from X12PC860Lib import *

def main(inn,out):
    
    DateToday = date.today().strftime("20%y%m%d")
    TimeNow = time.strftime('%H%M', time.localtime())
    eLog.info('Date %s, Time %s' % (DateToday, TimeNow))
    
    partnerID = inn.ta_info['frompartner']
    vendorID = inn.ta_info['topartner']
    ediReferenceID = inn.ta_info['reference']
 
    try:
        eMgr = PCEdiMgr('PO', '???')
        eMgr.startProcessingDoc()
        eMgr.startLogCapture(eLog)
        
        Customer = DynO(**partnerValue(partnerID, 'CustomerInfo'))
        Vendor = DynO(**vendorValue(vendorID, 'VendorInfo'))           # Vendor default values 
        JoCustomerNumber = Customer.JoCustomerNumber
        JoShipToCustomerNumber = Customer.JoShipToCustomerNumber
        
        pc = JoOrderChange(**partnerValue(partnerID, 'Default_JoOrderChange'))
        
        pc.DSItems = {} # 2 level dictionary caching qty per [loc][line] as specified in SDQ
        
        pc.PONotes = list()
        pc.ShippingNotes = list()
        pc.CarrierNotes = list()
        
        notes = None

        #===============================================================================================================
        # Customer PO identification and dates
        #===============================================================================================================
        pc.CusPOChangeType = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH01':None})
        pc.CusPOType = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH02':None})
        pc.CusPONumber = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH03':None})
        pc.CusPOReleaseNumber = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH04':None})
        pc.CusChangeOrderSeqNumber = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH05':None}) or '0'
        pc.CusPODate = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH06':None})
        pc.CusPOChangeDate = inn.get({'BOTSID':'ST'},{'BOTSID':'BCH','BCH11':None})
        pc.UIHR = pc.CusPONumber
        pc.UDAT = pc.CusPODate
        pc.UPOREL = pc.CusPOReleaseNumber
        pc.UDATCH = pc.CusPOChangeDate
        pc.UPOCHTP = pc.CusPOChangeType
        pc.UCOSEQ = pc.CusChangeOrderSeqNumber
        
        # to tie pickled doc data tree to nut filename and doc type 
        # used to determine rendering format (i.e. a django template).
        # this gets stored in out.ta_info['botskey'] for later use
        pc.EdiDocType = 'X12PC860'        
        pc.EdiDocID = 'PC%s-%s' % (pc.CusPONumber, pc.CusChangeOrderSeqNumber)
        pc.EdiDocDate = pc.CusPOChangeDate
        pc.EdiFromPartnerID = partnerID
        pc.EdiToPartnerID = vendorID
        pc.EdiDateProcessed = DateToday
        pc.EdiTimeProcessed = TimeNow
        
        eMgr.refNum = pc.CusPONumber
        
        eLog.info('EDI X12 860PC e%s jc%s dt%s' % (
            pc.EdiDocID, JoCustomerNumber, pc.CusPODate))
        eLog.info('PO Change: chtp%s chdt%s chsq%s porel%s'  % (
            pc.CusPOChangeType, pc.CusPOChangeDate, pc.CusChangeOrderSeqNumber, pc.CusPOReleaseNumber))
        
        #===========================================================================
        # Generate the OrderChange
        #===========================================================================
        # primary key
        pc.JoSoldToCustomer = JoCustomerNumber
        pc.UKDR = pc.JoSoldToCustomer
        
        #===============================================================================================================
        # CUR segment
        #===============================================================================================================
        pc.UWAE = pc.CusSellerCurrencyCode = inn.get({'BOTSID':'ST'},
                                                     {'BOTSID':'CUR',
                                                      'CUR01':'SE','CUR02':None}) or Vendor.CurrencyCode 
       
        #===========================================================================================================
        # REF segment
        #===========================================================================================================
        pc.CusInternalVendorNumber =    inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'IA','REF02':None})
        pc.VenCustomerNumber =          inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'IT','REF02':None})
        pc.PromotionDealNumber =        inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'PD','REF02':None})
        pc.DepartmentNumber =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'DP','REF02':None})
    
        #===========================================================================================================
        # FOB segment
        #===========================================================================================================
        pc.CusFOBMethodOfPaymentCode =      inn.get({'BOTSID':'ST'},     
                                                    {'BOTSID':'FOB','FOB01':None})
        pc.CusFOBQualifierCode =            inn.get({'BOTSID':'ST'},     
                                                    {'BOTSID':'FOB','FOB02':None})
        pc.CusFOBDescription =              inn.get({'BOTSID':'ST'},   
                                                    {'BOTSID':'FOB','FOB03':None})
        
        #===============================================================================================================
        # ITD segment
        #===============================================================================================================
        pc.CusTOSTypeCode =             inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD01':None})
        pc.CusTOSTermsBasisDateCode =   inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD02':None})
        pc.CusTOSDiscountPercent =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD03':None})
        pc.CusTOSDiscountDueDate =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD04':None})
        pc.CusTOSDiscountDaysDue =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD05':None})
        pc.CusTOSNetDueDate =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD06':None}) 
        pc.CusTOSNetDaysDue =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD07':None})
        pc.CusTOSDiscountAmount =       inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD08':None})
        pc.CusTOSDeferredDueDate =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD09':None})
        pc.CusTOSDeferredAmountDue =   inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD10':None})
        pc.CusTOSPercentOfInvoicePayable = inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD11':None})
        pc.CusTOSDescription =          inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD12':None}) 
        pc.CusTOSDayOfMonth =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD13':None})             
        pc.CusTOSPaymentMethodCode =    inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD14':None})     
        pc.CusTOSPercent =              inn.get({'BOTSID':'ST'},
                                                {'BOTSID':'ITD','ITD15':None})     
    
        pc.UTOSDP = pc.CusTOSDiscountPercent
        pc.UTOSDDD = pc.CusTOSDiscountDaysDue
        pc.UTOSNDD =  pc.CusTOSNetDaysDue
        pc.UTOSTXT = pc.CusTOSDescription
 
        #===========================================================================================================
        # DTM segment
        #===========================================================================================================
          
        pc.DateCancelIfNotShipped =    inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'001','DTM02':None})
        pc.DateDeliveryRequested =     inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'002','DTM02':None})
        pc.DateShippingRequested =     inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'010','DTM02':None})
        pc.DateDoNotShipBefore =       inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'037','DTM02':None})
        pc.DateDoNotShipAfter =        inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'038','DTM02':None})
        
        pc.JoOrderCancelDate = pc.DateCancelIfNotShipped or pc.DateDoNotShipAfter
        pc.UENT = pc.JoOrderCancelDate 
        
        pc.JoLastInvoiceDate = pc.DateDeliveryRequested or pc.DateDoNotShipBefore
        pc.UDATRE = pc.JoLastInvoiceDate
        
        #===========================================================================================================
        # TD5 segment
        #
        # Specify Carrier and Routing Info (0..N)
        #===========================================================================================================
        for td5 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'TD5'}):
            carrierCode = td5.get({'BOTSID':'TD5','TD502':'2','TD503':None})
            if carrierCode:
                pc.CarrierCode = carrierCode
            notes = td5.get({'BOTSID':'TD5','TD502':'92','TD503':None})
            if notes:
                pc.CarrierNotes.append(notes)
            notes = td5.get({'BOTSID':'TD5','TD505':None})
            if notes:
                pc.CarrierNotes.append(notes)
        
        #===========================================================================================================
        # CTB segment
        #
        # Shipping notes and restrictions (0..N)    
        #===========================================================================================================
        for ctb in inn.getloop({'BOTSID':'ST'},{'BOTSID':'CTB'}):
            notes = ctb.get({'BOTSID':'CTB','CTB01':'AA','CTB02':None})
            if notes:
                pc.ShippingNotes.append(notes)
    
        #===========================================================================================================
        # N9 segment
        # Additional reference info (0..1)
        #===========================================================================================================
        for n9 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'N9'}):
            notes = n9.get({'BOTSID':'N9','N901':'L1','N903':None})  # L1: letters and notes
            if notes:
                pc.PONotes.append(notes)
        
            #===========================================================================================================
            # N9:MTX segment
            # Messages (0..N)
            #===========================================================================================================
            for mtx in n9.getloop({'BOTSID':'N9'},{'BOTSID':'MTX'}):
                notes = mtx.get({'BOTSID':'MTX','MTX02':None})
                if notes:
                    pc.PONotes.append(notes)
        
        #===========================================================================================================
        # Parties involved in the order: BillTo, ShipTo, SoldTo, RemitTo
        #===========================================================================================================
        pc.JoShipToCustomer = JoShipToCustomerNumber
        pc.UKDN = pc.JoShipToCustomer
        
        pc.JoSoldToCustomer = JoCustomerNumber
        pc.UKDR = pc.JoSoldToCustomer
        
        #===========================================================================================================
        # N1 segment
        #===========================================================================================================
        for n1 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'N1'}):
            n1Type = n1.get({'BOTSID':'N1','N101':None})
    
            #=======================================================================
            # Capture ShipTo info
            #=======================================================================
            if n1Type == 'ST':
                # get ShipTo location ID
                stID = n1.get({'BOTSID':'N1','N103':'91','N104':None})
                if stID:
                    pc.ShipToIDQualifier= '91'
                else:
                    stID = n1.get({'BOTSID':'N1','N103':'92','N104':None})
                    if stID:
                        pc.ShipToIDQualifier = '92'
                    else:
                        stID = n1.get({'BOTSID':'N1','N103':'93','N104':None})
                        if stID:
                            pc.ShipToIDQualifier = '93'
                if stID:
                    eLog.debug('ShipTo (id type %s) location ID: %s' % (pc.ShipToIDQualifier, stID))
                else:
                    eLog.warn('ShipTo location ID not assigned in PO.')
                
                # assign ShipTo location ID to JoOrder.UTX3
                locID = stID    
                pc.ShipToIDCode = locID
                pc.UTX3 = pc.ShipToIDCode
                
                # add additional name text to first name
                stName = n1.get({'BOTSID':'N1','N102':None})
                stName2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N2','N201':None})  # additional name text
                if stName and stName2:
                    stName += ' ' + stName2
                    
                # add suffix location ID to end of ShipTo name line as [LOC ##]
                if locID:
                    stIDsuffix = ' [LOC %s]' % (locID,)
                else:
                    stIDsuffix = ''

                if stName:
                    eLog.info('ShipTo: %s' % (stName,))
                    # assign permutated ShipTo name to JoOrder.ShipToName 
                    pc.ShipToName = stName + stIDsuffix 
                    pc.UNA2 = pc.ShipToName     
                    
                    pc.UNA3 = pc.ShipToAddressLine1     = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N301':None})
                    pc.UNA4 = pc.ShipToAddressLine2     = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N302':None})
                    pc.USTR = ''  # 3rd address line is unused
                    pc.UORT = pc.ShipToCity             = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N401':None})
                    pc.USTA = pc.ShipToStateOrProvince  = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N402':None})
                    pc.UPLZ = pc.ShipToPostalCode       = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N403':None})
                    pc.ULND = pc.ShipToCountryCode      = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N404':None})
                else:
                    if locID:
                        eLog.info('ShipTo: JoCustomer %s Loc #%s' % (JoCustomerNumber, locID))
                        eLog.info('Loading Customer Loc #%s info from store locations table' % (locID,))
                        # lookup locID in store locations table
                        st = Session.query(JoPartnerShipToLocation).filter_by(PartnerID=partnerID,ID=locID).first()
                        if st:
                            # populate ShipTo info from store locations table
                            pc.UNA2 = pc.ShipToName           = st.Name + stIDsuffix
                            pc.UNA3 = pc.ShipToAddressLine1   = st.AddressLine1
                            pc.UNA4 = pc.ShipToAddressLine2   = st.AddressLine2
                            pc.USTR = ''  # 3rd address line is unused
                            pc.UORT = pc.ShipToCity           = st.City
                            pc.USTA = pc.ShipToStateOrProvince= st.State
                            pc.UPLZ = pc.ShipToPostalCode     = st.Zip
                            pc.ULND = pc.ShipToCountryCode    = st.Country
                        else:
                            # could not find a matching store location, show CSR warnings and --- out values
                            eLog.warn("JoCustomer %s ShipTo location #%s info not found in DB!" % (JoCustomerNumber, locID))
                            eLog.warn('[CSR note] Plz enter ShipTo address details.')
                            pc.UNA2 = pc.ShipToName           = '[ShipTo JoCustomer %s loc %s]' % (
                                                                                JoCustomerNumber, locID)
                            pc.UNA3 = pc.ShipToAddressLine1   = '[ShipTo JoCustomer %s loc %s address]' % (
                                                                                JoCustomerNumber, locID)
                            pc.USTR = ''  # 3rd address line is unused
                            pc.UNA4 = pc.ShipToAddressLine2   = '---'
                            pc.UORT = pc.ShipToCity           = '---'
                            pc.USTA = pc.ShipToStateOrProvince= '---'
                            pc.UPLZ = pc.ShipToPostalCode     = '---'
                            pc.ULND = pc.ShipToCountryCode    = '---'                        
                
            #===========================================================================================================
            # Capture BillTo info
            #===========================================================================================================
            #
            # NOTE: Jomar maintained BillTo info is used in Invoice generation, NOT this info
            #                
            if n1Type == 'BT': 
                    
                # add additional name text to first name
                btName = n1.get({'BOTSID':'N1','N102':None})
                btName2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N2','N201':None})  # additional name text
                if btName and btName2:
                    btName += ' ' + btName2
                    
                eLog.info('BillTo jc%s: %s' % (VNA(pc.JoSoldToCustomer), VNA(btName)))
                pc.BillToName = btName  
                     
                # get BillTo location ID
                btID = n1.get({'BOTSID':'N1','N103':'91','N104':None})
                if btID:
                    pc.BillToIDQualifier= '91'
                else:
                    btID = n1.get({'BOTSID':'N1','N103':'92','N104':None})
                    if btID:
                        pc.BillToIDQualifier = '92'
                    else:
                        btID = n1.get({'BOTSID':'N1','N103':'93','N104':None})
                        if btID:
                            pc.BillToIDQualifier = '93'
                if btID:
                    eLog.debug('BillTo (id type %s) location ID: %s' % (pc.BillToIDQualifier, btID))

                # none of these values are stored to the Jomar DB, we save them for PO rendering
                pc.BillToAddressLine1 = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N301':None})
                pc.BillToAddressLine2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N302':None})
                pc.BillToCity = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N401':None})
                pc.BillToStateOrProvince = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N402':None})
                pc.BillToPostalCode = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N403':None})
                pc.BillToCountryCode = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N404':None})
        
        #===============================================================================
        # Generate the OrderChange line items
        #===============================================================================
        pcLines = list()
        lineItem = 0
        pc.NumberOfLineItems = 0
        for pc1 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'POC'}):
            
            pcLine = JoOrderLineChange(**partnerValue(partnerID, 'Default_JoOrderLineChange'))
            pcLines.append(pcLine)
            
            lineItem += 1
            pcLineNumber = lineItem * 10
            pcLine.LineNumber = pcLineNumber 
    
            pcLine.JoSoldToCustomer = JoCustomerNumber
            pcLine.VKDR = pcLine.JoSoldToCustomer
            
            pcLine.CusPONumber = pc.CusPONumber
            pcLine.VIHR = pcLine.CusPONumber
                
            #===========================================================================================================
            # CTP Segment: Other pricing info
            #===========================================================================================================
            prices = list()
            for ctp in pc1.getloop({'BOTSID':'POC'},{'BOTSID':'CTP'}):
                priceQ = ctp.get({'BOTSID':'CTP','CTP02':None})
                price = ctp.get({'BOTSID':'CTP','CTP03':None})
                prices.append((priceQ, price))
            pcLine.Pricing = prices
            
            #=======================================================================================================
            # PO Line item change details
            #=======================================================================================================
            pcLine.ChangeTypeCode = pc1.get({'BOTSID':'POC','POC02':None})
            pcLine.VPOLICHTP = pcLine.ChangeTypeCode
            
            pcLine.QuantityOrdered = pc1.get({'BOTSID':'POC','POC03':None})
            pcLine.VMGS = pcLine.QuantityOrdered
            
            pcLine.QuantityLeftToReceive = pc1.get({'BOTSID':'POC','POC04':None})
            pcLine.VQLTR = pcLine.QuantityLeftToReceive
            
            pcLine.UnitOfMeasurement = pc1.get({'BOTSID':'POC','POC05':None})
            pcLine.VUOM = pcLine.UnitOfMeasurement = 'EA'   # hardcode: not sure why this doesn't work right
            
            pcLine.UnitPrice = pc1.get({'BOTSID':'POC','POC06':None})
            pcLine.VPR1 = pcLine.UnitPrice
            
            # calculate line price if qty and unitPrice are available
            if pcLine.UnitPrice and pcLine.QuantityOrdered:
                pcLine.LinePrice = Decimal(pcLine.UnitPrice) * Decimal(pcLine.QuantityOrdered)
                pcLine.LinePrice = fmtDecimalToMoney(pcLine.LinePrice)
            
            #=======================================================================
            # Get qualified identifiers associated with each line item's
            # baseline item data in segment POC
            #=======================================================================
            itemIDQToAttributeMap = {
                'UP':'UPCCode',
                'VA':'VendorStyleCode',
                'VN':'VendorItemNumber',
                'EN':'EANCode',
                'IN':'BuyerItemNumber',
                'IT':'BuyerStyleCode',
                'SM':'NRMASizeCode',
                'VE':'VendorColor',
                'BO':'BuyerColor',
                'IZ':'BuyerSizeCode',
            }  
            
            pcLine.UPCCode = None      
            pcLine.VendorStyleCode = None     
            pcLine.VendorItemNumber = None    
            pcLine.EANCode = None     
            pcLine.BuyerItemNumber = None      
            pcLine.BuyerStyleCode = None
            pcLine.NRMASizeCode = None     
            pcLine.VendorColor = None     
            pcLine.BuyerColor = None      
            pcLine.BuyerSizeCode = None     
            
            for qualCol, idCol in [ ('08', '09'), ('10', '11'),
                                    ('12', '13'), ('14', '15'), ('16', '17'),
                                    ('18', '19'), ('20', '21'), ('22', '23'), 
                                    ('24', '25')]:
                idQualifier = pc1.get({'BOTSID':'POC','POC'+qualCol:None})
                if idQualifier:
                    itemID = pc1.get({'BOTSID':'POC','POC'+idCol:None})
                    if itemID:
                        attributeName = itemIDQToAttributeMap.get(idQualifier, None)
                        if attributeName:
                            eLog.debug('%s = %s' % (attributeName, itemID))
                            pcLine.__setattr__(attributeName, itemID)
                        else:
                            eLog.warning(
                                "Unknown ID qualifier %s = \'%s\' in POC segment" % (idQualifier, itemID))
                            
            # lookup our SKU if not provided in doc
            if not pcLine.VendorStyleCode and pcLine.UPCCode:
                skuFromUPC = lookupVendorStyleNumberByUPC(Session, pcLine.UPCCode);
                pcLine.VendorStyleCode = skuFromUPC
                
            pcLine.VANR = pcLine.VendorStyleCode
            
            #===========================================================================================================
            # PID Segment: Product/Item Description 
            #===========================================================================================================
            pcLine.ProductDescription = pc1.get(
                                        {'BOTSID':'POC'},
                                        {'BOTSID':'PID','PID02':'08','PID05':None})
            pcLine.ColorDescription = pc1.get(
                                        {'BOTSID':'POC'}, 
                                        {'BOTSID':'PID','PID02':'73','PID05':None})
            pcLine.SizeDescription = pc1.get(
                                        {'BOTSID':'POC'}, 
                                        {'BOTSID':'PID','PID02':'74','PID05':None})
            pcLine.BuyerColorDescription = pc1.get(
                                        {'BOTSID':'POC'}, 
                                        {'BOTSID':'PID','PID02':'75','PID05':None})
            pcLine.BuyerSizeDescription = pc1.get(
                                        {'BOTSID':'POC'}, 
                                        {'BOTSID':'PID','PID02':'91','PID05':None})

            pcLine.VPRDTXT = pcLine.ProductDescription
            pcLine.VCLRTXT = pcLine.ColorDescription
            pcLine.VCLRREQTXT = pcLine.BuyerColorDescription
            pcLine.VSIZTXT = pcLine.SizeDescription
            #=======================================================================================================
            # Customer packing request details (not used)            
            #=======================================================================================================
            pcLine.CusNumberOfInnerPacks = pc1.get({'BOTSID':'POC'},
                                                   {'BOTSID':'PO4','PO401':None})
            pcLine.CusNumberOfItemsPerPack = pc1.get({'BOTSID':'POC'},
                                                     {'BOTSID':'PO4','PO402':None})
            pcLine.CusNumberOfItemsPerPackUOM = pc1.get({'BOTSID':'POC'},
                                                        {'BOTSID':'PO4','PO403':None})
            
            #===========================================================================
            #    EDI Processing of Drop Ship orders:
            # 
            #    * Each (LocationCode,Quantity) value pair specified in this section 
            #      identifies a unique line item within a SalesOrder containing line 
            #      items whose destination is the address identified by the Location Code. 
            # 
            #    * Each of these location specific Sales Orders will be assigned a unique 
            #      PO Number that is constructed using the pattern: OrderNumber-LocationCode 
            #      where OrderNumber is the PO number associated with the original client PO. 
            # 
            #    * If an N1-ShipTo segment has also been specified for the PO:
            #      - Then the values in the parent PO's N1-ShipTo segment will be copied into 
            #        the N1-ShipTo segment of the location specific order    
            #      - Else the N1-ShipTo values associated with the new order will be 
            #        constructed by looking up the supplied LocationCode in the JOMAR 
            #        ShipToLocation table (i.ee Customer ShipTo locations) 
            #        and using the name and address info defined therein. 
            #    """
            #===========================================================================
            
            # build list of drop ship locations
            pcLine.LocIDQualifierCode = pc1.get({'BOTSID':'POC'},{'BOTSID':'SDQ', 'SDQ02':None})
            
            pcLine.DistList = list()   # as (locID, qty) tuples
            for sdq in pc1.getloop({'BOTSID':'POC'},{'BOTSID':'SDQ'}):
                for idCol, qtyCol in [('03', '04'), ('05', '06'), 
                                      ('07', '08'), ('09', '10'), 
                                      ('11', '12'), ('13', '14'), 
                                      ('15', '16'), ('17', '18'), 
                                      ('19', '20'), ('21', '22')]:
                    locID = sdq.get({'BOTSID':'SDQ',('SDQ'+idCol):None})
                    if locID is not None:
                        locQty = sdq.get({'BOTSID':'SDQ',('SDQ'+qtyCol):None})
                        if not locID in pc.DSItems:
                            pc.DSItems[locID] = dict()
                        eLog.debug("Qty %s for location %s" % (locQty, locID))
                        pcLine.DistList.append([locID, locQty])
                        pc.DSItems[locID][lineItem] = locQty
    
        pc.NumberOfLineItems += 1
        
        # save our original PO Change Req data tree (as a nut file) for rendering later...  
        pc.Lines = pcLines          
        eMgr.saveTree(partnerID, pc, pc.EdiDocType, pc.EdiDocID, inn.ta_info)
        
        eMgr.stopLogCapture(eLog)
            
        # raises error if user fixable errors found during processing
        eMgr.finishProcessingDoc(pc)
     
        # this may raise errors, but they would be internal programming issues that a user would not be able to fix
        Session.commit()
                
        # do postprocessing of successful EDI run
        eMgr.finishProcessingEdi(pc, ta_info=inn.ta_info)

        
    except:
        eLog.error('Processing of incoming X12 PC860 document failed!')
        Session.rollback()
        eLog.error('Jomar DB changes have been rolled back.') 
        raise
    
    finally:
        Session.close()
        
    # notifies BOTS that we don't have an output file
    out.ta_info['statust'] = DONE