#mapping-script
from badgerEDI import eLog

from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.sql import func

from badgerEDI.bedislib import *
from badgerEDI.db import *
from badgerEDI.ediutil import *

import bots.transform as transform
from bots.botsconfig import *
import bots.botsglobal

import logging
import copy
import time
from datetime import date 
import pickle

from X12PO850Lib import *

def main(inn,out):

    DateToday = date.today().strftime("20%y%m%d")
    TimeNow = time.strftime('%H%M', time.localtime())
    #eLog.info('Date %s, Time %s' % (DateToday, TimeNow))
    
    partnerID = inn.ta_info['frompartner']
    vendorID = inn.ta_info['topartner']
    ediReferenceID = inn.ta_info['reference']
            
    Session.begin(subtransactions=True)
    try:
        eMgr = POEdiMgr('SO', '???')
        eMgr.startProcessingDoc()
        eMgr.startLogCapture(eLog)

        CustomerInfo = DynO(**partnerValue(partnerID, 'CustomerInfo'))
        VendorInfo = DynO(**vendorValue(vendorID, 'VendorInfo'))           # Vendor default values 
        
        JoCustomerNumber = CustomerInfo.JoCustomerNumber
        Customer = JoCustomer(JoCustomerNumber)
        JoShipToCustomerNumber = CustomerInfo.JoShipToCustomerNumber
        
        # get BillTo location ID, if one is specified in PO
        btID = (inn.get({'BOTSID':'ST'},{'BOTSID':'N1','N101':'BT','N103':'91','N104':None}) or
                inn.get({'BOTSID':'ST'},{'BOTSID':'N1','N101':'BT','N103':'92','N104':None}) or
                inn.get({'BOTSID':'ST'},{'BOTSID':'N1','N101':'BT','N103':'93','N104':None}))
        
        # if a btID is specified, then we need to resolve the real JoCustomer BillTo/ShipTo numbers
        # in this case we expect the JoCustomerNumber and JoShipToCustomerNumber values to be dicts
        # of (<loc ID>, <JOMAR Customer ID>) pairs that can be used to lookup the corresponding
        # JOMAR customer BillTo/ShipTo IDs
        if btID:  
            eLog.info('PO BillTo location is specified as location #%s.', btID)
            eLog.info('Retrieving Jomar BillTo/ShipTo customer ids from tables in partner profile for %s.', partnerID)
            JoCustomerNumber = isinstance(JoCustomerNumber, dict) and JoCustomerNumber.get(btID)
            JoCustomerNumber or eLog.error('Jomar BillTo customer number not specified in profile for location #%s!', btID)
            JoShipToCustomerNumber = isinstance(JoShipToCustomerNumber, dict) and JoShipToCustomerNumber.get(btID)
            JoShipToCustomerNumber or eLog.error('Jomar ShipTo customer number not specified in profile for location #%s!', btID)
            
        eLog.info('JoCustomer: BillTo customer number is %s', JoCustomerNumber)            
        eLog.info('JoCustomer: ShipTo customer number is %s', JoShipToCustomerNumber)
                    
        po = JoOrder(**(partnerValue(partnerID, 'Default_JoOrder') or getJoDefaultOrderValuesForCustomer(JoCustomerNumber)))
        
        po.DSItems = {} # 2 level dictionary storing qty per [loc][line] as specified in SDQs
        
        po.PONotes = list()
        po.ShippingNotes = list()
        po.CarrierNotes = list()
        
        notes = None

        #===============================================================================================================
        # Customer PO identification and date
        #===============================================================================================================
        po.CusPOPurposeCode = inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG01':None})
        po.CusPOType =   inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG02':None})
        po.CusPONumber = inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG03':None})
        po.CusPODate =   inn.get({'BOTSID':'ST'},{'BOTSID':'BEG','BEG05':None})
        po.UIHR = po.CusPONumber
        po.UIHS = po.CusPODate
        
        # to tie pickled doc data tree to nut filename and doc type 
        # used to determine rendering format (i.e. a django template).
        # this gets stored in out.ta_info['botskey'] for later use
        po.EdiDocType = 'X12PO850'
        po.EdiDocID = 'PO'+po.CusPONumber
        po.EdiDocDate = po.CusPODate
        po.EdiFromPartnerID = partnerID
        po.EdiToPartnerID = vendorID
        po.EdiDateProcessed = DateToday
        po.EdiTimeProcessed = TimeNow
        
        eLog.info('EDI Load X12 PO850 %s-%s (ed%s) jc%s dt%s' % (
            po.CusPOType, po.CusPONumber, ediReferenceID, JoCustomerNumber, po.CusPODate))
        
        po.UBLA = po.JoPOType
        po.UBNR = po.JoBusinessUnit
        po.UPLT = po.JoBasePlant
        po.UAKT = po.JoOrderAction
        
        po.USL1 = po.JoOrderSelection1
        po.USL2 = po.JoOrderSelection2
        # note: po.USL3 is used for po.JoCreditStatus (auto-populated at order load time)
        po.UAB1 = po.JoOrderAdjPercent1
        po.UAB2 = po.JoOrderAdjPercent2        
        po.URB1 = po.JoOrderDiscountPercent
        po.UTXL = po.JoOrderDeliveryTermsCode
        po.UTXV = po.JoOrderShipViaTermsCode
        po.UPSHP = po.JoAllowPartialShipment
        po.USLREQ = po.JoShippingLabelNotesReq
        po.UVT1 = po.JoSalesRep1
        po.UVT2 = po.JoSalesRep2
        po.UVT3 = po.JoSalesRep3
        po.UPV1 = po.JoRepCommission1
        po.UPV2 = po.JoRepCommission2
        po.UPV3 = po.JoRepCommission3
        
        ### these values should be auto-populated by order batch load process
        ### which copies appropriate values based on BillTo customer info
        #        
        #po.UPLN = po.JoOrderPlanStats
        #po.UFIL = po.JoBlindShip
        #po.ULOE = po.JoInternalSystemCodeULOE
        #po.UTXZ = po.JoOrderPaymentTermsCode
        #po.XTX5 = po.JoOrderPaymentTermsText
        #po.USHPCODE = po.JoShippingCode
        #po.UTRKLOAD = po.JoTruckLoadingReq
        #po.UCONSSB = po.JoConsignmentSB
        #po.UCIT = po.JoUCIT
        #po.UESTWGT = po.JoEstWeight
        #po.UESTCTN = po.JoEstCartonSize
        #po.UCAMT = po.JoUCAMT
        #po.UADAT = po.JoUADAT
        #po.UFRTC = po.JoUFRTC
        #po.USL3 = po.JoCustomerCreditStatus
        
        #===============================================================================================================
        # CUR segment
        #===============================================================================================================
        po.UWAE = po.CusSellerCurrencyCode = inn.get({'BOTSID':'ST'},
                                                     {'BOTSID':'CUR',
                                                      'CUR01':'SE','CUR02':None}) or po.JoCurrencyCode or VendorInfo.CurrencyCode 
        
        #===========================================================================================================
        # REF segment
        #===========================================================================================================
        po.CusInternalVendorNumber =    inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'IA','REF02':None})
        po.VenCustomerNumber =          inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'IT','REF02':None})
        po.PromotionDealNumber =        inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'PD','REF02':None})
        po.DepartmentNumber =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'REF','REF01':'DP','REF02':None})
        # TODO: Capture unknown REF qualifiers
        
        #===========================================================================================================
        # FOB segment
        #===========================================================================================================
        po.CusFOBMethodOfPaymentCode =  inn.get({'BOTSID':'ST'},     
                                                {'BOTSID':'FOB','FOB01':None})
        po.CusFOBQualifierCode =        inn.get({'BOTSID':'ST'},     
                                                {'BOTSID':'FOB','FOB02':None})
        po.CusFOBDescription =          inn.get({'BOTSID':'ST'},   
                                                {'BOTSID':'FOB','FOB03':None})

        #===============================================================================================================
        # ITD segment
        #===============================================================================================================
        
        po.CusTOSTypeCode =             inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD01':None})
        po.CusTOSTermsBasisDateCode =   inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD02':None})
        po.CusTOSDiscountPercent =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD03':None})
        po.CusTOSDiscountDueDate =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD04':None})
        po.CusTOSDiscountDaysDue =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD05':None})
        po.CusTOSNetDueDate =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD06':None}) 
        po.CusTOSNetDaysDue =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD07':None})
        po.CusTOSDiscountAmount =       inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD08':None})
        po.CusTOSDeferredDueDate =      inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD09':None})
        po.CusTOSDeferredAmountDue =    inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD10':None})
        po.CusTOSPercentOfInvoicePayable = inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD11':None})
        po.CusTOSDescription =          inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD12':None}) 
        po.CusTOSDayOfMonth =           inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD13':None})             
        po.CusTOSPaymentMethodCode =    inn.get({'BOTSID':'ST'}, 
                                                {'BOTSID':'ITD','ITD14':None})     
        po.CusTOSPercent =              inn.get({'BOTSID':'ST'},
                                                {'BOTSID':'ITD','ITD15':None})     
        
        #===========================================================================================================
        # DTM segment
        #===========================================================================================================
        po.DateCancelIfNotShipped =    inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'001','DTM02':None})
        po.DateDeliveryRequested =     inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'002','DTM02':None})
        po.DateShippingRequested =     inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'010','DTM02':None})
        po.DateDoNotShipBefore =       inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'037','DTM02':None})
        po.DateDoNotShipAfter =        inn.get({'BOTSID':'ST'}, {'BOTSID':'DTM','DTM01':'038','DTM02':None})
        
        po.JoOrderCancelDate = po.DateCancelIfNotShipped or po.DateDoNotShipAfter
        po.UENT = po.JoOrderCancelDate 
        
        po.JoDateRequested = po.DateDeliveryRequested or po.DateDoNotShipAfter or DateToday
        po.UDATRE = po.JoDateRequested
        
        po.JoDateEntered = DateToday
        po.UDAT = po.JoDateEntered
        
        po.JoShipDateReq =  po.DateShippingRequested or po.JoShipDateReq
        po.USHPDATE = po.JoShipDateReq
                
        po.JoPromiseDate = (po.DateShippingRequested or 
                            po.DateDeliveryRequested or 
                            po.DateDoNotShipBefore or DateToday)
        
        # if promise date would have been in the past, make it today's date
        if po.JoPromiseDate < DateToday:
            eLog.warn('Calculated default Promise Date is in the past, setting Promise Date to today\'s date')
            po.JoPromiseDate = DateToday
            
        po.UDATLS = po.JoPromiseDate
        
        po.JoCSRPromiseDate = po.JoPromiseDate   # will need this for the JoOrder lines
        
        #===========================================================================================================
        # TD5 segment
        #
        # Specify Carrier and Routing Info (0..N)
        #===========================================================================================================
        for td5 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'TD5'}):
            carrierCode = td5.get({'BOTSID':'TD5','TD502':'2','TD503':None})
            if carrierCode:
                po.CarrierCode = carrierCode
            notes = td5.get({'BOTSID':'TD5','TD502':'92','TD503':None})
            if notes:
                po.CarrierNotes.append(notes)
            notes = td5.get({'BOTSID':'TD5','TD505':None})
            if notes:
                po.CarrierNotes.append(notes)
        
        #===========================================================================================================
        # CTB segment
        # Shipping notes and restrictions (0..N)    
        #===========================================================================================================
        for ctb in inn.getloop({'BOTSID':'ST'},{'BOTSID':'CTB'}):
            notes = ctb.get({'BOTSID':'CTB','CTB01':'AA','CTB02':None})
            if notes:
                po.ShippingNotes.append(notes)
    
        #===========================================================================================================
        # N9 segment
        # Additional reference info (0..1)
        #===========================================================================================================
        for n9 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'N9'}):
            notes = n9.get({'BOTSID':'N9','N901':'L1','N903':None})  # L1: letters and notes
            if notes:
                po.PONotes.append(notes)
        
            #===========================================================================================================
            # N9:MTX segment
            # Messages (0..N)
            #===========================================================================================================
            for mtx in n9.getloop({'BOTSID':'N9'},{'BOTSID':'MTX'}):
                notes = mtx.get({'BOTSID':'MTX','MTX02':None})
                if notes:
                    po.PONotes.append(notes)
        
        #===========================================================================================================
        # Parties involved in the order: BillTo, ShipTo, SoldTo, RemitTo
        #===========================================================================================================
        po.JoShipToCustomer = JoShipToCustomerNumber
        po.UKDN = po.JoShipToCustomer
        
        po.JoSoldToCustomer = JoCustomerNumber
        po.UKDR = po.JoSoldToCustomer
        
        #===========================================================================================================
        # N1 segment
        #===========================================================================================================
        po.ShipType = 'MS'  # defaults to ShipType is 'MS' (multi-location direct shipment)
                            # ST segment processing will change this appropriately:
                            # 1) if Ship To locID specified and is not a Warehouse loc, then ShipType is 'DS'
                            # 2) if Ship To locID specified and identifies a Warehouse loc, then ShipType is 'CD'
        
        for n1 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'N1'}):
            n1Type = n1.get({'BOTSID':'N1','N101':None})
    
            #=======================================================================
            # Capture ShipTo info
            #=======================================================================
            if n1Type == 'ST':
                
                # get ShipTo location ID
                stID = n1.get({'BOTSID':'N1','N103':'91','N104':None})
                if stID:
                    po.ShipToIDQualifier= '91'
                else:
                    stID = n1.get({'BOTSID':'N1','N103':'92','N104':None})
                    if stID:
                        po.ShipToIDQualifier = '92'
                    else:
                        stID = n1.get({'BOTSID':'N1','N103':'93','N104':None})
                        if stID:
                            po.ShipToIDQualifier = '93'
                if stID:
                    eLog.info('ShipTo (id type %s) location ID: %s' % (po.ShipToIDQualifier, stID))
                else:
                    eLog.warn('ShipTo location ID not assigned in PO.')
                
                # assign ShipTo location ID to JoOrder.UTX3
                # Note: This value should ALWAYS be of the form '<JoCustomer ID>9999'
                #     So that the special EDI customer record values for that customer will
                #     be used to populate the 'default' address fields at order batch load time.
                # Gotcha: The corresponding JOMAR DB record must have blanks for all name and address fields,
                #    otherwise Jomar will overwrite 'empty' data with an incorrect
                #    field value at batch load time! We found this out the hard way.
                locID = stID    
                po.ShipToIDCode = locID
                po.UTX3 = po.ShipToIDCode
                po.ShipToCrossDockLocID = None  # default
                
                if locID:
                    eLog.info('ShipTo: Loading Customer loc %s details from partner %s locations table', locID, partnerID)
                    # lookup locID in store locations table
                    stQ = Session.query(JoPartnerShipToLocation)
                    st = stQ.filter_by(PartnerID=partnerID, ID=locID, Category='ST').first()
                    
                    if st:
                        # if ship to loc is in category 'ST', then ShipType is 'DS' (direct ship)
                        po.ShipToCategory = 'ST'  
                        po.ShipType = 'DS'
                        eLog.info('ShipType: PO ShipType is \'DS\' (direct ship) to %s location ST%s.', partnerID, locID)
                    else:
                        st = stQ.filter_by(PartnerID=partnerID, ID=locID, Category='WH').first()
                        if st:
                            # if ship to loc is a warehouse, then ShipType is 'CD' (cross dock scenario)
                            po.ShipToCategory = 'WH'  
                            po.ShipType = 'CD'
                            po.ShipToCrossDockLocID = locID
                            eLog.info('ShipType: PO ShipType is \'CD\' (cross dock) to %s warehouse WH%s.', partnerID, locID)
                        else:
                            # not found in table (using literal values for ST name/address info from PO)
                            po.ShipToCategory = 'ST'
                            po.ShipType = 'DS'
                            
                    stIDsuffix = ' [%s %s]' % (po.ShipToCategory, locID)
                    if st:
                        # populate ShipTo info (store or warehouse) from partner ship-to location record
                        po.ShipToName           = st.Name + stIDsuffix
                        po.ShipToAddressLine1   = st.AddressLine1
                        po.ShipToAddressLine2   = st.AddressLine2
                        po.ShipToCity           = st.City
                        po.ShipToStateOrProvince= st.State
                        po.ShipToPostalCode     = st.Zip
                        po.ShipToCountryCode    = st.Country
                    else:
                        # could not find a matching ship-to location, show CSR warnings and --- out values
                        eLog.warn("JoCustomer %s ShipTo location %s not found in DB!", JoCustomerNumber, locID)
                        eLog.warn('[CSR note] Plz edit ShipTo address details.')
                        po.ShipToName           = '[Customer %s loc %s name]' % (JoCustomerNumber, locID)
                        po.ShipToAddressLine1   = '[Customer %s loc %s address]' % (JoCustomerNumber, locID)
                        po.ShipToAddressLine2   = '__'
                        po.ShipToCity           = '__'
                        po.ShipToStateOrProvince= '__'
                        po.ShipToPostalCode     = '__'
                        po.ShipToCountryCode    = '__'                        
                
                else:
                    # no locID was specified, so use ship-to info details specified in the PO doc 
                    po.ShipType = 'DS'          # PO ShipType is 'DS' (direct ship)
                    po.ShipToCategory = 'SP'    # ship-to address was 'SP' (specified in the PO doc)
                    eLog.info('ShipTo: Using literal ship-to name and address specified in the PO')
                    eLog.info('ShipType: PO ShipType is \'DS\' (direct ship)')
                    
                    # add any additional name text to first name
                    stName1 = n1.get({'BOTSID':'N1','N102':None})
                    stName2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N2','N201':None})  # additional name text
                    stName = stName1 or stName2
                    if stName1 and stName2:
                        stName += ', ' + stName2
                    if stName:
                        eLog.info('ShipTo: %s', stName)
                        po.ShipToName = stName 
                        
                    po.ShipToAddressLine1     = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N301':None})
                    po.ShipToAddressLine2     = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N302':None})
                    po.ShipToCity             = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N401':None})
                    po.ShipToStateOrProvince  = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N402':None}) or '__'
                    po.ShipToPostalCode       = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N403':None}) or '__'
                    po.ShipToCountryCode      = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N404':None}) or '__'
    
                # make sure country code is in valid format
                if po.ShipToCountryCode:
                    if len(po.ShipToCountryCode) > 2:
                        po.ShipToCountryCode = translateCountryCodeTo2Digits(po.ShipToCountryCode)
                else:
                    po.ShipToCountryCode = 'US'                        
                    
                # set state to 'state undefined' JOMAR value '__' if CountryCode not in ['CA', 'US']
                if po.ShipToStateOrProvince and po.ShipToCountryCode not in ['CA', 'US']:
                     po.ShipToStateOrProvince = '__'

                # populate the JoOrder header columns
                po.UNA2 = po.ShipToName
                po.UNA3 = po.ShipToAddressLine1
                po.UNA4 = po.ShipToAddressLine2
                po.USTR = ''  # 3rd address line is unused
                po.UORT = po.ShipToCity
                po.USTA = po.ShipToStateOrProvince
                po.UPLZ = po.ShipToPostalCode
                po.ULND = po.ShipToCountryCode

            #===========================================================================================================
            # Capture BillTo info
            #===========================================================================================================
            #
            # Note: BillTo info maintained in JOMAR for this JoCustomer is used in Invoice generation, NOT this info
            
            if n1Type == 'BT': 
                    
                # add additional name text to first name
                btName1 = n1.get({'BOTSID':'N1','N102':None})
                btName2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N2','N201':None})  # additional name text
                btName = btName1 or btName2
                if btName1 and btName2:
                    btName += ', ' + btName2
                    
                eLog.info('BillTo jc%s: %s' % (VNA(po.JoSoldToCustomer), VNA(btName)))
                po.BillToName = btName  
                     
                # get BillTo location ID
                btID = n1.get({'BOTSID':'N1','N103':'91','N104':None})
                if btID:
                    po.BillToIDQualifier= '91'
                else:
                    btID = n1.get({'BOTSID':'N1','N103':'92','N104':None})
                    if btID:
                        po.BillToIDQualifier = '92'
                    else:
                        btID = n1.get({'BOTSID':'N1','N103':'93','N104':None})
                        if btID:
                            po.BillToIDQualifier = '93'
                if btID:
                    eLog.info('BillTo: Billing To location %s (id type %s).', btID, po.BillToIDQualifier)
                    po.BillToName += ' [LOC %s]' % (btID,)
                else:
                    eLog.info('BillTo: Location ID not assigned in PO.  Using default billing info for sold-to customer %s.', po.JoSoldToCustomer)
                    
                # none of these values get stored to the Jomar DB, but we save them for PO rendering
                po.BillToAddressLine1 = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N301':None})
                po.BillToAddressLine2 = n1.get({'BOTSID':'N1'},{'BOTSID':'N3','N302':None})
                po.BillToCity = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N401':None})
                po.BillToStateOrProvince = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N402':None})
                po.BillToPostalCode = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N403':None}) or ''
                po.BillToCountryCode = n1.get({'BOTSID':'N1'},{'BOTSID':'N4','N404':None}) or ''
                    
                # Some EDI Trading Partners can choose one of multiple BT addresses. (!) 
                # Since JOMAR doesn't handle this easily, we need to change the 
                # JoCustomerBillTo to match the Customer ID in JOMAR where the appropriate 
                # BillTo name and address info is defined.
                #
                # translate btID to proper JOMAR Customer ID using TP custom conversion table
                #
                # FIXME: implement btID->JoCustomer mapping here and in CC tables and
                # FIXME: load assigned name address values from JoCustomer table. 
                
        #===========================================================================
        # iterate over the order line items
        #===========================================================================
        poLines = []
        lineItem = 0
        poLineNumber = 0
        for po1 in inn.getloop({'BOTSID':'ST'},{'BOTSID':'PO1'}):
            
            poLine = JoOrderLine(**partnerValue(partnerID, 'Default_JoOrderLine'))
            poLines.append(poLine)
    
            lineItem += 1
            poLineNumber += 10
            
            eMgr.nowProcessingLine(poLineNumber)    
            
            # get line item dates of interest from SCH segment
            poLine.DateCancelIfNotShipped =    po1.get({'BOTSID':'PO1'}, {'BOTSID':'SCH','SCH05':'001','SCH06':None})
            poLine.DateDeliveryRequested =     po1.get({'BOTSID':'PO1'}, {'BOTSID':'SCH','SCH05':'022','SCH06':None})
            poLine.DateShippingRequested =     po1.get({'BOTSID':'PO1'}, {'BOTSID':'SCH','SCH05':'010','SCH06':None})
            poLine.DateDoNotShipBefore =       po1.get({'BOTSID':'PO1'}, {'BOTSID':'SCH','SCH05':'037','SCH06':None})
            poLine.DateDoNotShipAfter =        po1.get({'BOTSID':'PO1'}, {'BOTSID':'SCH','SCH05':'038','SCH06':None})
            
            poLine.JoDateEntered = DateToday
            # TODO: Jomar value?
            poLine.JoLineCancelDate = poLine.DateCancelIfNotShipped or poLine.DateDoNotShipAfter
            # TODO: Jomar value? 
            
            poLine.JoDateRequested = poLine.DateDeliveryRequested or poLine.DateDoNotShipAfter
            poLine.JoPromiseDate = (poLine.DateShippingRequested or 
                                    poLine.DateDeliveryRequested or 
                                    poLine.DateDoNotShipBefore)
            # if promise date would have been in the past, make it today's date
            if poLine.JoPromiseDate and poLine.JoPromiseDate < DateToday:
                eLog.warn('Calculated line item Promise Date is in the past, setting line item Promise Date to today\'s date')
                poLine.JoPromiseDate = DateToday
                
            # get order qty/price from PO1 seg
            poLine.QuantityOrdered = po1.get({'BOTSID':'PO1','PO102':None})
            poLine.UnitOfMeasurement = po1.get({'BOTSID':'PO1','PO103':None})
            poLine.UnitPrice = po1.get({'BOTSID':'PO1','PO104':None})
            
            # pre-calculate line price if qty and unitPrice are available (for rendering PO)
            if poLine.UnitPrice and poLine.QuantityOrdered:
                poLine.LinePrice = Decimal(poLine.UnitPrice) * Decimal(poLine.QuantityOrdered)
                poLine.LinePrice = fmtDecimalToMoney(poLine.LinePrice)
                
            poLine.JoCSRPromiseDate = poLine.JoPromiseDate 
                
            #===================================================================
            # Populate Jomar order line values
            #===================================================================
            poLine.VAKT = po.JoOrderAction
            poLine.VKDL = poLine.JoShipToCustomer  = po.JoShipToCustomer
            poLine.VLFN = poLine.LineNumber = poLineNumber
            poLine.VBLA = poLine.JoOrderType = po.JoPOType
            poLine.VBNR = poLine.JoBusinessUnit = po.JoBusinessUnit
            poLine.VPLT = poLine.JoShippingPlant  = po.JoBasePlant
            poLine.VPLF = poLine.JoPlanningPlant = po.JoBasePlant
            poLine.VMGD = poLine.JoAssignedQuantity
            poLine.VMGL = poLine.JoDeliveredQuantity
            poLine.VMGQ = poLine.JoBillAndHoldQuantity
            poLine.VMGR = poLine.JoInvoicedQuantity
            poLine.VMGDA = poLine.JoAssignedQuantityAlternate
            poLine.VMGLA = poLine.JoDeliveredQuantityAlternate
            poLine.VMGRA = poLine.JoInvoicedQuantityAlternate
            poLine.VTQTA = poLine.JoTransferQuantityAlternate
            poLine.VALLOC = poLine.JoAllocatedQuantity
            poLine.VALCMP = poLine.JoAllocationComplete
            poLine.VRB1 = poLine.JoDiscountPercentage1
            poLine.VRB2 = poLine.JoDiscountPercentage2
            poLine.VRB3 = poLine.JoDiscountPercentage3
            poLine.VRB4 = poLine.JoDiscountPercentage4
            poLine.VRB1TX = poLine.JoDiscountCode1
            poLine.VRB2TX = poLine.JoDiscountCode2
            poLine.VWBTF = poLine.JoGrossAmountForeign
            poLine.VWBTS = poLine.JoGrossAmountDomestic
            poLine.VWNTF = poLine.JoNetAmountForeign
            poLine.VWNTS = poLine.JoNetAmountDomestic
            poLine.VQUALT = poLine.QualityCode = poLine.JoQualityCode
            poLine.VVP1 = poLine.ListPrice = poLine.JoListPrice
            poLine.VMGS = poLine.QuantityOrdered
            poLine.VUOM = poLine.UnitOfMeasurement
            poLine.VPR1 = poLine.UnitPrice
            
            #===========================================================================================================
            # TODO: should be populated from <CUSTOMER ID>9999 ShipTo record in Jomar DB
            #===========================================================================================================
            poLine.VLAG = po.JoLocation
            poLine.VCSTS = po.JoCustomerCreditStatus
            poLine.VPV1 = po.JoRepCommission1
            poLine.VPV2 = po.JoRepCommission2
            poLine.VPV3 = po.JoRepCommission3
            poLine.VPER = po.JoCommissionPercent
            
            #===========================================================================================================
            # CTP Segment: Other pricing info
            #===========================================================================================================
            prices = list()
            for ctp in po1.getloop({'BOTSID':'PO1'},{'BOTSID':'CTP'}):
                priceQ = ctp.get({'BOTSID':'CTP','CTP02':None})
                price = ctp.get({'BOTSID':'CTP','CTP03':None})
                prices.append((priceQ, price))
            poLine.Pricing = prices
            
            #=======================================================================
            # Get qualified identifiers associated with each line item's
            # baseline item data in segment PO1
            #=======================================================================
            itemIDQToAttributeMap = {
                'UP':'UPCCode',
                'VA':'VendorStyleCode',
                'VN':'VendorItemNumber',
                'EN':'EANCode',
                'IN':'BuyerItemNumber',
                'IT':'BuyerStyleCode',
                'SM':'NRMASizeCode',
                'VE':'VendorColor',
                'BO':'BuyerColor',
                'IZ':'BuyerSizeCode',
            }  
            
            poLine.UPCCode = None      
            poLine.VendorStyleCode = None     
            poLine.VendorItemNumber = None    
            poLine.EANCode = None     
            poLine.BuyerItemNumber = None      
            poLine.BuyerStyleCode = None
            poLine.NRMASizeCode = None     
            poLine.VendorColor = None     
            poLine.BuyerColor = None      
            poLine.BuyerSizeCode = None     
            
            for qualCol, idCol in [('06', '07'),('08', '09'),('10', '11'),
                                    ('12', '13'),('14', '15'),('16','17'),
                                    ('18', '19'), ('20','21'), ('22', '23'), 
                                    ('24', '25')]:
                idQualifier = po1.get({'BOTSID':'PO1','PO1'+qualCol:None})
                if idQualifier:
                    itemID = po1.get({'BOTSID':'PO1','PO1'+idCol:None})
                    if itemID:
                        attributeName = itemIDQToAttributeMap.get(idQualifier, None)
                        if attributeName:
                            eLog.debug('%s = %s' % (attributeName, itemID))
                            poLine.__setattr__(attributeName, itemID)
                        else:
                            eLog.warning(
                                "Unknown ID qualifier %s = \'%s\' in PO1 segment" % (idQualifier, itemID,))
            
            #===========================================================================================================
            # PID Segment: Product/Item Description 
            #===========================================================================================================
            poLine.ProductDescription = po1.get(
                                        {'BOTSID':'PO1'},
                                        {'BOTSID':'PID','PID02':'08','PID05':None})
            poLine.ColorDescription = po1.get(
                                        {'BOTSID':'PO1'}, 
                                        {'BOTSID':'PID','PID02':'73','PID05':None})
            poLine.SizeDescription = po1.get(
                                        {'BOTSID':'PO1'}, 
                                        {'BOTSID':'PID','PID02':'74','PID05':None})
            poLine.BuyerColorDescription = po1.get(
                                        {'BOTSID':'PO1'}, 
                                        {'BOTSID':'PID','PID02':'75','PID05':None})
            poLine.BuyerSizeDescription = po1.get(
                                        {'BOTSID':'PO1'}, 
                                        {'BOTSID':'PID','PID02':'91','PID05':None})
    
            # strange fixup code
            upcCode = poLine.UPCCode
            vendorStyleCode = poLine.VendorStyleCode
            if upcCode:
                skuFromUPC = lookupVendorStyleNumberByUPC(Session, upcCode);
                if skuFromUPC:
                    poLine.VendorStyleCode = skuFromUPC
                    
            poLine.VANR = poLine.VendorStyleCode
            poLine.VCANR = poLine.BuyerItemNumber
            
            #=======================================================================
            # SHOULD have saved in Order V1CSC 'Customer Color' field, but field too small
            # 
            # poLine.CusNumberOfInnerPacks = po1.get({'BOTSID':'PO1'}, 
            #                                       {'BOTSID':'PO4','PO401':None})
            # poLine.CusNumberOfItemsPerPack = po1.get({'BOTSID':'PO1'}, 
            #                                         {'BOTSID':'PO4','PO402':None})
            # poLine.CusNumberOfItemsPerPackUOM = po1.get({'BOTSID':'PO1'}, 
            #                                            {'BOTSID':'PO4','PO403':None})
            #=======================================================================
            
            
            #===========================================================================
            #
            #    EDI Processing of Drop Ship orders:
            # 
            #    * Each (LocationCode,Quantity) value pair specified in this section 
            #      identifies a unique line item within a SalesOrder containing line 
            #      items whose destination is the address identified by the Location Code. 
            # 
            #    * Each of these location specific Sales Orders will be assigned a unique 
            #      PO Number that is constructed using the pattern: OrderNumber-LocationCode 
            #      where OrderNumber is the PO number associated with the original client PO. 
            # 
            #    * If an N1-ShipTo segment has also been specified for the PO:
            #      - Then the values in the parent PO's N1-ShipTo segment will be copied into 
            #        the N1-ShipTo segment of the location specific order    
            #      - Else the N1-ShipTo values associated with the new order will be 
            #        constructed by looking up the supplied LocationCode in the JOMAR 
            #        ShipToLocation table (i.ee Customer ShipTo locations) 
            #        and using the name and address info defined therein. 
            #
            #===========================================================================
    
            #=======================================================================
            # to handle SDQ PO1 segments for drop ship orders
            # we build a list of drop ship locations
            #=======================================================================
            poLine.LocIDQualifierCode = po1.get({'BOTSID':'PO1'},{'BOTSID':'SDQ', 'SDQ02':None})
            
            poLine.DistList = list()   # as (locID, qty) tuples
            for sdq in po1.getloop({'BOTSID':'PO1'},{'BOTSID':'SDQ'}):
                for idCol, qtyCol in [('03', '04'), ('05', '06'), 
                                      ('07', '08'), ('09', '10'), 
                                      ('11', '12'), ('13', '14'), 
                                      ('15', '16'), ('17', '18'), 
                                      ('19', '20'), ('21', '22')]:
                    locID = sdq.get({'BOTSID':'SDQ',('SDQ'+idCol):None})
                    if locID is not None:
                        locQty = sdq.get({'BOTSID':'SDQ',('SDQ'+qtyCol):None})
                        if not locID in po.DSItems:
                            po.DSItems[locID] = dict()
                        eLog.debug("Qty %s for location %s" % (locQty, locID))
                        poLine.DistList.append([locID, locQty])
                        po.DSItems[locID][lineItem] = locQty
                        
        #===========================================================================================================
        # Now we need to push any line item delivery/requested dates back up to the order level
        # and push line item promise/delivery dates back down to the line items.
        #===========================================================================================================
        
        # assign order level dates to soonest of the set of all line item dates and any order level date assigned
        TheEndOfTime = 99999999   # not really a valid date, but it captures the spirit of what we need here ;-)
        po.JoPromiseDate = po.JoPromiseDate or TheEndOfTime
        po.JoCSRPromiseDate = po.JoCSRPromiseDate or TheEndOfTime
        po.JoDateRequested = po.JoDateRequested or TheEndOfTime
        for poLine in poLines: 
            po.JoPromiseDate = min([(poLine.JoPromiseDate or TheEndOfTime), po.JoPromiseDate])
            po.JoCSRPromiseDate = min([(poLine.JoCSRPromiseDate or TheEndOfTime), po.JoCSRPromiseDate])
            po.JoDateRequested = min([(poLine.JoDateRequested or TheEndOfTime), po.JoDateRequested])
        # if no order on line level dates have been assigned, default to DateToday
        if po.JoPromiseDate == TheEndOfTime:    # not assigned in PO and no earlier date found
            po.JoPromiseDate = DateToday
        if po.JoCSRPromiseDate == TheEndOfTime: # not assigned in PO and no earlier date found
            po.JoCSRPromiseDate = DateToday
        if po.JoDateRequested == TheEndOfTime:  # not assigned in PO and no earlier date found
            po.JoDateRequested = DateToday
        # reassign order-level dates to (possibly) updated values
        po.UDATRE = po.JoDateRequested
        po.UDATLS = po.JoPromiseDate
        # reassign all line item Promise/CSRPromise dates to corresponding order-level dates
        # and line item dates requested to order date requested, if not originally assigned in PO
        for poLine in poLines: 
            poLine.VDAT = poLine.JoPromiseDate = po.JoPromiseDate
            poLine.VDAT1 = poLine.JoCSRPromiseDate = po.JoCSRPromiseDate
            poLine.VDAT2 = poLine.JoDateRequested = poLine.JoDateRequested or po.JoDateRequested
                     
        #===========================================================================================================
        # now we either split out separate locations into different SOs or create
        # a single DS 'direct ship' SO in Jomar 
        #===========================================================================================================
                       
        po.Lines = poLines
        
        po.NumberOfLineItems = lineItem
        soNumbers = ''
        poNumbers = ''

        eMgr.nowProcessingDoc()
        
        # save our original PO data tree (as a nut file) for rendering later...  
        eMgr.saveTree(partnerID, po, po.EdiDocType, po.EdiDocID, inn.ta_info)

        # NEED TO DO THIS TO MAINtain integrity of PO error log
        eMgrExemplar = copy.deepcopy(eMgr)
              
        po.Orders = list()

        if po.ShipType in ['MS','CD'] and po.DSItems:
      
            #=======================================================================
            # Process as separate stand-alone orders
            #
            # ShipTypes handled here:
            #     MS) Multi-location Direct Ship
            #     CD) Cross Dock
            #
            # Split up direct-ship multi-location POs into separate stand-alone 
            # Jomar SalesOrders differentiated by unique ship-to locations (one per order).
            #=======================================================================
            for locID in po.DSItems.keys():
                
                # make our own logger to capture messages during processing of stand-alone SO
                # eLog = logging.getLogger('eLog.SO'+locID)  # each SO gets its own logger

                # copy the parent errors and add additional errors we may encounter
                # durign splitup of PO into child SOs.  Start capturing eLog messages.                
                soEMgr = copy.deepcopy(eMgrExemplar)
                soEMgr.logRecorder.eMgr = soEMgr
                soEMgr.logRecorder.eResults = soEMgr.eResults
                soEMgr.startLogCapture(eLog)
                
                # clone the SO which has been populated with the common data values
                lineItemQtyMap = po.DSItems[locID]
                saOrder = copy.deepcopy(po)
                
                saOrder.EdiDocID = saOrder.EdiDocID + '-' + locID
    
                # assign a new JoOrderNumber
                saOrder.JoOrderNumber = getNextJoOrderNumber(Session)
                Session.commit()  # do not remove this commit!
                
                # so that error msgs are identified properly in log
                eMgr.refNum = saOrder.JoOrderNumber
                
                saOrder.UBLN = saOrder.JoOrderNumber
                
                saOrder.CusPOType = 'SA'  # standalone order
                saOrder.UIHR = saOrder.CusPONumber = po.CusPONumber+'-'+locID
                
                poNumbers = poNumbers + saOrder.CusPONumber + ' '
                soNumbers = soNumbers + saOrder.JoOrderNumber + ' '
                                
                eLog.info('Split PO: Creating stand-alone SO %s for PO %s', saOrder.JoOrderNumber, saOrder.CusPONumber)

                #===================================================================
                # ship-to info now refers to store at 'locID' from line item SQA seg
                #===================================================================
                saOrder.UTX3 = saOrder.ShipToIDCode = locID
                
                #===================================================================
                # fill in location info only if
                # 1) this is a cross-dock shipment type OR
                # 2) no ship-to info has been specified thus far
                #===================================================================
                if (po.ShipType == 'CD' or 
                    (not ('ShipToName' in saOrder.__dict__ and saOrder.ShipToName) 
                        and not ('ShipToAddressLine1' in saOrder.__dict__ and saOrder.ShipToAddressLine1) 
                        and not ('ShipToAddressLine2' in saOrder.__dict__ and saOrder.ShipToAddressLine2))): 
                    
                    # lookup location details in ShipTo locations table where category 'ST'
                    st = Session.query(JoPartnerShipToLocation).filter_by(PartnerID=partnerID, ID=locID, Category='ST').first()
                    
                    # this completely overwrites any WH location details currently in saOrder copied from the PO
                    if st:
                        stLocSuffix = ' [LOC %s]' % (locID,)
                        saOrder.ShipToName           = st.Name + stLocSuffix
                        saOrder.ShipToAddressLine1   = st.AddressLine1
                        saOrder.ShipToAddressLine2   = st.AddressLine2
                        saOrder.ShipToCity           = st.City
                        saOrder.ShipToStateOrProvince= st.State
                        saOrder.ShipToPostalCode     = st.Zip
                        saOrder.ShipToCountryCode    = st.Country
                    else:
                        infoTuple = (JoCustomerNumber, locID)
                        eLog.warn('Customer %s ShipTo location info not found in DB!' % infoTuple)
                        eLog.warn('[CSR note] Plz enter ShipTo address details.')
                        saOrder.ShipToName           = '[ShipTo JoCustomer %s Loc %s]' % infoTuple
                        saOrder.ShipToAddressLine1   = '[ShipTo JoCustomer %s Loc %s address]' % infoTuple
                        saOrder.ShipToAddressLine2   = '__'
                        saOrder.ShipToCity           = '__'
                        saOrder.ShipToStateOrProvince= '__'
                        saOrder.ShipToPostalCode     = '__'
                        saOrder.ShipToCountryCode    = '__'
                        
                saOrder.UNA2 = saOrder.ShipToName
                saOrder.UNA3 = saOrder.ShipToAddressLine1
                saOrder.UNA4 = saOrder.ShipToAddressLine2
                saOrder.UORT = saOrder.ShipToCity
                saOrder.USTA = saOrder.ShipToStateOrProvince
                saOrder.UPLZ = saOrder.ShipToPostalCode
                saOrder.ULND = saOrder.ShipToCountryCode
                
                #===================================================================
                # update the line items
                #===================================================================
                saOrderLines = []
                saLineNumber = 0
                for poLineNumber in lineItemQtyMap.keys():
                    saOrderLine = copy.deepcopy(poLines[poLineNumber-1])
                    saLineNumber += 1
                    
                    soEMgr.nowProcessingLine(saLineNumber * 10)
    
                    saOrderLine.LineNumber = saLineNumber * 10
                    saOrderLine.VLFN = saOrderLine.LineNumber
                    
                    saOrderLine.JoShipToCustomer = JoShipToCustomerNumber
                    saOrderLine.VKDL = saOrderLine.JoShipToCustomer
                    
                    # do not need copy of DistList for SA orders, since they are specific to one locID
                    if saOrderLine.DistList:
                        del saOrderLine.DistList
                        saOrderLine.DistList = None

                    #===============================================================
                    # fixup VendorStyleCode and VANR values:
                    # spaces get clobbered by the time we get here. not sure why
                    #===============================================================
                    upc = saOrderLine.UPCCode
                    prefix = 'UP'
                    if upc: 
                        sku = cachedVendorStyleNumberByUPC(upc)
                        if sku: # if found in cache
                            saOrderLine.VANR = saOrderLine.VendorStyleCode = sku
                            prefix = 'SK'
                        else:
                            eLog.warn("Unknown UPC '%s' in EDI doc PO1 segment." % (upc,))                     
                            eLog.warn("[CSR] Plz add missing line item info.")
                    
                    saOrderLine.JoOrderNumber = saOrder.JoOrderNumber
                    saOrderLine.VBLN = saOrderLine.JoOrderNumber
                    
                    saOrderLine.QuantityOrdered = lineItemQtyMap[poLineNumber]
                    saOrderLine.VMGS = saOrderLine.QuantityOrdered

                    saLineLabel = str(saOrderLine.LineNumber).zfill(3)

                    soEMgr.nowProcessingDoc()
                    
                    eLog.debug('%s (PO %s) Qty %s %s[%s] @ %s %s', 
                        saLineLabel, str(poLineNumber).zfill(3), 
                        VNA(saOrderLine.QuantityOrdered), 
                        prefix, VNA(sku or upc), 
                        VNA(fmtStringAsMoney(saOrderLine.UnitPrice)),
                        (saOrderLine.UnitOfMeasurement or ''))
                    if (saOrderLine.BuyerStyleCode or saOrderLine.BuyerColor or 
                        saOrderLine.NRMASizeCode or saOrderLine.BuyerSizeCode):
                        eLog.debug('      ByrReq: ST=%s, CO=%s, SZ=%s', 
                            VNA(saOrderLine.BuyerStyleCode), 
                            VNA(saOrderLine.BuyerColor), 
                            VNA(saOrderLine.NRMASizeCode or saOrderLine.BuyerSizeCode))
                    soEMgr.nowProcessingLine(saLineNumber)

                    # FIXME: we do not process SDQ 01,02, and 23 values. Are they used?
                    
                    saOrderLines.append(saOrderLine)
            
                saOrder.Lines = saOrderLines          

                # save inJomar DB
                Session.add(saOrder)
                Session.add_all(saOrderLines)

                # soEMgr.stopNestedLogCapture(eLog)
                soEMgr.stopLogCapture(eLog)
                
                # raises error if errors found during processing
                soEMgr.finishProcessingDoc(saOrder)
                
                # this may raise errors, but they would be internal programming issues that a user would not be able to fix
                Session.commit()
                
                # add OrderInfo for the single order that was created to the PO data tree list of info objs in Orders
                saOrderInfo = DynO(poNumber=saOrder.CusPONumber, orderNumber=saOrder.JoOrderNumber)
                po.Orders.append(saOrderInfo)
                
                # free up some memory
                del saOrder
            
        else:
            
            #=======================================================================
            # Process as a single order - shipment type is 'DS' for 'Direct Ship'
            #=======================================================================
 
            # assign a new JoOrderNumber
            po.JoOrderNumber = getNextJoOrderNumber(Session)
            Session.commit()    # do not remove this commit!
            
            # so that error msgs are identified properly in log
            eMgr.refNum = po.JoOrderNumber
            
            po.UBLN = po.JoOrderNumber
            
            soNumbers = po.JoOrderNumber + ' '
            poNumbers = po.CusPONumber + ' '
            
            for poLineNumber, poLine in enumerate(poLines):
                poLineNumber += 1
                poLineItem = poLineNumber * 10
                
                eMgr.nowProcessingLine(poLineItem)
                
                poLine.JoOrderNumber = po.JoOrderNumber
                poLine.VBLN = poLine.JoOrderNumber
    
                #===================================================================
                # fixup VendorStyleCode and VANR values:
                # spaces get clobbered by the time we get here. not sure why
                #===================================================================
                upc = poLine.UPCCode
                prefix = 'UP'
                # eLog.info( 'Cached VendorStyleCode for UPC %s is %s' % (upc, sku))
                if upc:
                    sku = cachedVendorStyleNumberByUPC(upc)
                    if sku:
                        poLine.VANR = poLine.VendorStyleCode = sku
                        prefix = 'SK'
                        # eLog.debug('SKU \'%s\' found for UPC=\'%s\'' % (sku, upc,))
                    else:
                        eLog.warn('UPC=\'%s\' not found in Jomar UPC mapping table.' % (upc,))
                        eLog.warn('[CSR note] Plz add missing line item info.')
                        
                poLineLabel = str(poLineItem).zfill(3)
                
                eMgr.nowProcessingDoc()
                
                eLog.debug('%s Qty %s %s[%s] @ %s %s', 
                    poLineLabel, 
                    VNA(poLine.QuantityOrdered), 
                    prefix, VNA(sku or upc), 
                    VNA(fmtStringAsMoney(poLine.UnitPrice)), 
                    (poLine.UnitOfMeasurement or ''))
                if poLine.BuyerStyleCode or poLine.BuyerColor or poLine.NRMASizeCode or poLine.BuyerSizeCode:
                    eLog.debug('    ByrReq: ST=%s, CO=%s, SZ=%s', 
                        VNA(poLine.BuyerStyleCode), 
                        VNA(poLine.BuyerColor), 
                        VNA(poLine.NRMASizeCode or poLine.BuyerSizeCode))
                    
                eMgr.nowProcessingLine(poLineItem)

            # save inJomar DB
            Session.add(po)
            Session.add_all(poLines)

            eMgr.stopLogCapture(eLog)
            
            # raises error if errors found during processing
            eMgr.finishProcessingDoc(po)
            
            # this may raise errors, but they would be internal programming issues that a user would not be able to fix
            Session.commit()

            # add OrderInfo for the single order that was created to the PO data tree list of info objs in Orders
            poOrderInfo = DynO(poNumber=po.CusPONumber, orderNumber=po.JoOrderNumber)
            po.Orders.append(poOrderInfo)

        # do postprocessing for a successful EDI run
        eMgr.finishProcessingEdi(po, ta_info=inn.ta_info)

    except:
        eLog.error('Processing of incoming X12 PO850 document failed!')
        Session.rollback()
        eLog.error('Jomar DB changes have been rolled back.') 
        raise
    
    finally:
        Session.close()
    
    # notifies BOTS that we have produced no output file, but that's OK
    out.ta_info['statust'] = DONE